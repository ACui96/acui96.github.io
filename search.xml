<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring相关知识点</title>
    <url>/2022/05/22/spring%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="Spring-的-AOP-顺序"><a href="#Spring-的-AOP-顺序" class="headerlink" title="Spring 的 AOP 顺序"></a>Spring 的 AOP 顺序</h2><h3 id="AOP-常用注解"><a href="#AOP-常用注解" class="headerlink" title="AOP 常用注解"></a>AOP 常用注解</h3><ul>
<li>@Before                   前置通知 ： 目标方法之前执行</li>
<li>@After                      后置通知 ： 目标方法之后执行 （始终执行）<span id="more"></span></li>
<li>@AfterReturning    返回后通知 ： 目标方法结束之后执行（异常不执行）</li>
<li>@AfterThrowing     异常通知： 出现异常时候执行</li>
<li>@Around                 环绕通知： 环绕目标方法执行</li>
</ul>
<h3 id="题目：说说-springboot-中-AOP-的执行顺序"><a href="#题目：说说-springboot-中-AOP-的执行顺序" class="headerlink" title="题目：说说 springboot 中 AOP 的执行顺序"></a>题目：说说 springboot 中 AOP 的执行顺序</h3><h4 id="测试Spring4"><a href="#测试Spring4" class="headerlink" title="测试Spring4"></a>测试Spring4</h4><h5 id="情景假设及测试"><a href="#情景假设及测试" class="headerlink" title="情景假设及测试"></a>情景假设及测试</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring版本4.3.12.RELEASE	SpringBoot版本1.5.8.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>假设现在有一个业务类 <code>CalcService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcServiceImpl</span> <span class="keyword">implements</span> <span class="title">CalcService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x / y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义切面 MyAspect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int springLearning.aop.CalcServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeNotify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;************ @Before 我是前置通知 MyAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(public int springLearning.aop.CalcServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterNotify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;************ @After 我是后置通知 MyAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(public int springLearning.aop.CalcServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;************ @AfterReturning 我是返回后通知 MyAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(public int springLearning.aop.CalcServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;************ @AfterThrowing 我是异常通知 MyAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(public int springLearning.aop.CalcServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroud</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object retValue = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;************ @Around 我是环绕通知之前 AAA&quot;</span>);</span><br><span class="line">        retValue = proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;************ @Around 我是环绕通知之后 BBB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> springLearning.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test; <span class="comment">// spring4 用的junit</span></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@SpringBootTest</span> <span class="comment">// 相当于一个 Controller</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAop</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="comment">// 或用 Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CalcService calcService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAop4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正常情况&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;spring版本&quot;</span>+ SpringVersion.getVersion() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;SpringBoot版本&quot;</span>+ SpringBootVersion.getVersion());</span><br><span class="line">        System.out.println();</span><br><span class="line">        calcService.div(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAop4WithException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testAop4WithException&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;spring版本&quot;</span>+ SpringVersion.getVersion() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;SpringBoot版本&quot;</span>+ SpringBootVersion.getVersion());</span><br><span class="line">        System.out.println();</span><br><span class="line">        calcService.div(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Spring4-结果"><a href="#Spring4-结果" class="headerlink" title="Spring4 结果"></a>Spring4 结果</h5><p>正常情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正常情况</span><br><span class="line">spring版本4.3.12.RELEASE	SpringBoot版本1.5.8.RELEASE</span><br><span class="line"></span><br><span class="line">************ @Around 我是环绕通知之前 AAA</span><br><span class="line">************ @Before 我是前置通知 MyAspect</span><br><span class="line">             =========&gt; CalcServiceImpl 被调用了，计算结果为：5</span><br><span class="line">************ @Around 我是环绕通知之后 BBB</span><br><span class="line">************ @After 我是后置通知 MyAspect</span><br><span class="line">************ @AfterReturning 我是返回后通知 MyAspect</span><br></pre></td></tr></table></figure>

<p>异常情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">testAop4WithException</span><br><span class="line">spring版本4.3.12.RELEASE	SpringBoot版本1.5.8.RELEASE</span><br><span class="line"></span><br><span class="line">************ @Around 我是环绕通知之前 AAA</span><br><span class="line">************ @Before 我是前置通知 MyAspect</span><br><span class="line">************ @After 我是后置通知 MyAspect</span><br><span class="line">************ @AfterThrowing 我是异常通知 MyAspect</span><br><span class="line"></span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></table></figure>

<h4 id="测试-Spring5-3-18"><a href="#测试-Spring5-3-18" class="headerlink" title="测试 Spring5.3.18"></a>测试 Spring5.3.18</h4><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring版本5.3.18	SpringBoot版本2.6.6--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Spring5-结果"><a href="#Spring5-结果" class="headerlink" title="Spring5 结果"></a>Spring5 结果</h5><p>正常情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正常情况</span><br><span class="line">spring版本5.3.18	SpringBoot版本2.6.6</span><br><span class="line"></span><br><span class="line">************ @Around 我是环绕通知之前 AAA</span><br><span class="line">************ @Before 我是前置通知 MyAspect</span><br><span class="line">             =========&gt; CalcServiceImpl 被调用了，计算结果为：5</span><br><span class="line">************ @AfterReturning 我是返回后通知 MyAspect</span><br><span class="line">************ @After 我是后置通知 MyAspect</span><br><span class="line">************ @Around 我是环绕通知之后 BBB</span><br></pre></td></tr></table></figure>

<p>异常情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">testAop5WithException</span><br><span class="line">spring版本5.3.18	SpringBoot版本2.6.6</span><br><span class="line"></span><br><span class="line">************ @Around 我是环绕通知之前 AAA</span><br><span class="line">************ @Before 我是前置通知 MyAspect</span><br><span class="line">************ @AfterThrowing 我是异常通知 MyAspect</span><br><span class="line">************ @After 我是后置通知 MyAspect</span><br><span class="line"></span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></table></figure>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>Spring4 下</p>
<p><strong>正常情况：</strong>@Before—–&gt;@After—–&gt;@AfterReturning</p>
<p><strong>异常情况：</strong>@Before—–&gt;@After—–&gt;@AfterThrowing</p>
<p>Spring5 下</p>
<p><strong>正常情况：</strong>@Before—–&gt;@AfterReturning—–&gt;@After</p>
<p><strong>异常情况：</strong>@Before—–&gt;@AfterThrowing—–&gt;@After</p>
<p>tip：@After 应是类似 finally，最后执行  ，从 Spring5 以后，After 都是最后执行了</p>
<h2 id="Spring-的-循环依赖"><a href="#Spring-的-循环依赖" class="headerlink" title="Spring 的 循环依赖"></a>Spring 的 循环依赖</h2><h3 id="循环依赖相关问题"><a href="#循环依赖相关问题" class="headerlink" title="循环依赖相关问题"></a>循环依赖相关问题</h3><ul>
<li>你解释下Spring中的<strong>三级缓存</strong></li>
<li>三级缓存分别是什么，三个Map有何异同</li>
<li>什么是循环依赖？请你谈谈？看过Spring源码吗？一般我们说的<strong>Spring容器</strong>是什么</li>
<li><strong>如何检测</strong>是否存在循环依赖？实际开发中见过循环依赖的异常吗？</li>
<li>多例的情况下，循环依赖问题为什么无法解决？</li>
</ul>
<h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><ul>
<li><p>多个 bean 之间相互依赖，形成一个闭环。 如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        B b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        C c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        A a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通常来说，如果问 Spring 容器中如何解决循环依赖，<strong>一定是指默认的单例 Bean 中</strong>，属性相互引用的场景</p>
</li>
</ul>
<h3 id="两种注入方法对循环依赖的影响"><a href="#两种注入方法对循环依赖的影响" class="headerlink" title="两种注入方法对循环依赖的影响"></a>两种注入方法对循环依赖的影响</h3><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies">Spring官网文档</a></p>
<blockquote>
<p>Circular dependencies 循环依赖</p>
<p>If you use predominantly <strong>constructor injection</strong>, it is possible to create an unresolvable circular dependency scenario.</p>
<p>For example: Class A requires an instance of class B through constructor injection, and class B requires an instance of class A through constructor injection. If you configure beans for classes A and B to be injected into each other, the Spring IoC container detects this circular reference at runtime, and throws a <code>BeanCurrentlyInCreationException</code>.</p>
<p>One possible solution is to edit the source code of some classes to be configured by <strong>setters rather than constructors.</strong> Alternatively, avoid constructor injection and use setter injection only. In other words, although it is not recommended, you can configure circular dependencies with setter injection.</p>
<p>Unlike the typical case (with no circular dependencies), a circular dependency between bean A and bean B forces one of the beans to be injected into the other prior to being fully initialized itself (a classic chicken-and-egg scenario).</p>
</blockquote>
<p>上面这段话主要讲了使用<strong>构造器注入</strong>可能导致循环依赖问题，官方建议使用 <strong>Setter 注入方法</strong>。</p>
<h4 id="构造器注入方法"><a href="#构造器注入方法" class="headerlink" title="构造器注入方法"></a>构造器注入方法</h4><p>无法解决循环依赖问题，典型的<code>先有鸡还是先有蛋</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceA</span><span class="params">(ServiceB serviceB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServiceA serviceA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceB</span><span class="params">(ServiceA serviceA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceA = serviceA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//new ServiceA(new ServiceB(new ServiceA(......)));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Setter-注入方法"><a href="#Setter-注入方法" class="headerlink" title="Setter 注入方法"></a>Setter 注入方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServiceD serviceD;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServiceD</span><span class="params">(ServiceD serviceD)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceD = serviceD;</span><br><span class="line">        System.out.println(<span class="string">&quot;C里设置了D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceD</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServiceC serviceC;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServiceC</span><span class="params">(ServiceC serviceC)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceC = serviceC;</span><br><span class="line">        System.out.println(<span class="string">&quot;D设置C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServiceC c = <span class="keyword">new</span> ServiceC();</span><br><span class="line">        ServiceD d = <span class="keyword">new</span> ServiceD();</span><br><span class="line"></span><br><span class="line">        d.setServiceC(c);</span><br><span class="line">        c.setServiceD(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结论：AB 循环依赖问题只要A的注入方式是 Setter 注入，就不会有循环依赖问题</p>
<h3 id="容器环境下的循环依赖"><a href="#容器环境下的循环依赖" class="headerlink" title="容器环境下的循环依赖"></a>容器环境下的循环依赖</h3><ul>
<li><p>容器中，默认的单例场景（singleton）下是支持循环依赖的，不报错</p>
</li>
<li><p>原型场景（prototype）不支持循环依赖，会报错</p>
<blockquote>
<p>bean的作用域</p>
<ol>
<li>singleton 单例</li>
<li>prototype 原型</li>
<li>request</li>
<li>session</li>
<li>global-session   Spring5 已经没了</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="singleton-作用域下"><a href="#singleton-作用域下" class="headerlink" title="singleton 作用域下"></a>singleton 作用域下</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--scope不写也是默认单例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springLearning.CircularDependencies.setterInjection.ServiceC&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceD&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;d&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springLearning.CircularDependencies.setterInjection.ServiceD&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceC&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    ServiceC c = context.getBean(<span class="string">&quot;c&quot;</span>, ServiceC.class);</span><br><span class="line">    ServiceD d = context.getBean(<span class="string">&quot;d&quot;</span>, ServiceD.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果1</p>
<blockquote>
<p>08:47:37.965 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@470e2030<br>08:47:38.090 [main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loaded 2 bean definitions from class path resource [applicationContext.xml]<br>08:47:38.121 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean ‘c’<br>08:47:38.132 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean ‘d’<br>D设置C<br>C里设置了D</p>
</blockquote>
<h4 id="prototype作用域下"><a href="#prototype作用域下" class="headerlink" title="prototype作用域下"></a>prototype作用域下</h4><p>改成 prototype</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springLearning.CircularDependencies.setterInjection.ServiceC&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceD&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;d&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springLearning.CircularDependencies.setterInjection.ServiceD&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;peototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serviceC&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &#x27;c&#x27;: Requested bean is currently in creation: Is there an unresolvable circular reference?</span><br></pre></td></tr></table></figure>

<p>出现了 <code>BeanCurrentlyInCreationException</code> 异常</p>
<h3 id="Spring-容器的三级缓存解决循环依赖"><a href="#Spring-容器的三级缓存解决循环依赖" class="headerlink" title="Spring 容器的三级缓存解决循环依赖"></a>Spring 容器的三级缓存解决循环依赖</h3><p><a href="https://cloud.tencent.com/developer/article/1497692">一文告诉你Spring是如何利用”三级缓存”巧妙解决Bean的循环依赖问题的</a></p>
<p>重要结论： Spring 内部通过3级缓存来解决循环依赖  <strong>DefaultSingletonBeanRegistry</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title">SingletonBeanRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 一级缓存 Cache of singleton objects: bean name to bean instance. </span></span><br><span class="line"><span class="comment">	 *  单例池</span></span><br><span class="line"><span class="comment">	 *  实例化 + 初始化</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 三级缓存 Cache of singleton factories: bean name to ObjectFactory. </span></span><br><span class="line"><span class="comment">	 *  单例工厂的高速缓存</span></span><br><span class="line"><span class="comment">	 *  存放生成 bean 的工厂</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 二级缓存 Cache of early singleton objects: bean name to bean instance. </span></span><br><span class="line"><span class="comment">	 *  实例化但未初始化</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>一级缓存 singletonObjects ： 存放已经经历了完整生命周期的 bean</li>
<li>二级缓存 earlySingletonObjects： 存放早期暴露出来的 bean 对象， bean 的声明周期为结束，属性还未填充完毕</li>
<li>三级缓存 Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories： 存放可以生成 bean 的工厂，即 FactoryBean, 如果 A 类实现了 FactoryBean，那么依赖注入的时候不是注入 A 类，而是 A 类产生的 Bean</li>
</ul>
<p><strong>只有单例的 bean 会通过三级缓存提前暴露来解决循环依赖的问题</strong>，而非单例的 bean ，每次从容器中获取都是一个新的对象，都会重新创建，所以非单例的bean是没有缓存的，不会将器放到三级缓存中。</p>
<h4 id="A-B-两对象在三级缓存中的迁移说明"><a href="#A-B-两对象在三级缓存中的迁移说明" class="headerlink" title="A / B 两对象在三级缓存中的迁移说明"></a>A / B 两对象在三级缓存中的迁移说明</h4><ol>
<li>1A创建过程中需要B，于是A将自己放到三级缓里面，去实例化B</li>
<li>B实例化的时候发现需要A，于是B先查一级缓存，没有，再查二级缓存，还是没有，再查三级缓存，找到了A然后把三级缓存里面的这个A放到二级缓存里面，并删除三级缓存里面的A</li>
<li>B顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中状态）然后回来接着创建A，此时B已经创建结束，直接从一级缓存里面拿到B，然后完成创建，并将A自己放到一级缓存里面。</li>
</ol>
<h4 id="为什么一定要用三级缓存，用二级可以吗？一级可以吗？"><a href="#为什么一定要用三级缓存，用二级可以吗？一级可以吗？" class="headerlink" title="为什么一定要用三级缓存，用二级可以吗？一级可以吗？"></a>为什么一定要用三级缓存，用二级可以吗？一级可以吗？</h4><p><strong>使用三级缓存而非二级缓存并不是因为只有三级缓存才能解决循环引用问题，其实二级缓存同样也能很好解决循环引用问题。使用三级而非二级缓存并非出于IOC的考虑，而是出于AOP的考虑，即若使用二级缓存，在AOP情形下，注入到其他bean的，不是最终的代理对象，而是原始对象。</strong></p>
]]></content>
      <tags>
        <tag>Spring Java</tag>
      </tags>
  </entry>
  <entry>
    <title>cRPC-从零搭建一个rpc框架</title>
    <url>/2022/05/18/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><h2 id="概念及原理"><a href="#概念及原理" class="headerlink" title="概念及原理"></a>概念及原理</h2><h1 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化/反序列化"></a>序列化/反序列化</h1><h1 id="网络通信编程"><a href="#网络通信编程" class="headerlink" title="网络通信编程"></a>网络通信编程</h1><h1 id="代理实现"><a href="#代理实现" class="headerlink" title="代理实现"></a>代理实现</h1><h1 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h1>]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接工具类</title>
    <url>/2022/05/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="数据库连接工具类"><a href="#数据库连接工具类" class="headerlink" title="数据库连接工具类"></a>数据库连接工具类</h1><h2 id="利用-Druid-数据库连接池连接数据库"><a href="#利用-Druid-数据库连接池连接数据库" class="headerlink" title="利用 Druid 数据库连接池连接数据库"></a>利用 Druid 数据库连接池连接数据库</h2><p>Druid是阿里开源的数据库连接池，作为后起之秀，性能比dbcp、c3p0更高，使用也越来越广泛。Druid不仅是一个数据库连接池，还包含一个ProxyDriver、一系列内置的JDBC组件库、一个SQL Parser。支持所有JDBC兼容的数据库，包括Oracle、MySql、Derby、Postgresql、SQL Server、H2等。</p>
<span id="more"></span>
<p>druid的优点：</p>
<ol>
<li><strong>高性能</strong>。性能比dbcp、c3p0高很多。</li>
<li>只要是jdbc支持的数据库，druid都支持，对数据库的<strong>支持性好</strong>。并且Druid针对oracle、mysql做了特别优化。</li>
<li>提供<strong>监控功能</strong>。可以监控sql语句的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈等信息，来了解连接池、sql语句的工作情况，方便统计、分析SQL的执行性能</li>
</ol>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里Druid数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MySQL驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="druid-properties"><a href="#druid-properties" class="headerlink" title="druid.properties"></a>druid.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 放在 resources 下， mark direction as source root 才能访问到</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="comment">#这个可以缺省的，会根据url自动识别</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">##初始连接数，默认0</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#最大连接数，默认8</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">30</span></span><br><span class="line"><span class="comment">#最小闲置数</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#获取连接的最大等待时间，单位毫秒</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment">#缓存PreparedStatement，默认false</span></span><br><span class="line"><span class="attr">poolPreparedStatements</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#缓存PreparedStatement的最大数量，默认-1（不缓存）。大于0时会自动开启缓存PreparedStatement，所以可以省略上一句设置</span></span><br><span class="line"><span class="attr">maxOpenPreparedStatements</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure>

<h3 id="DruidUtil-java"><a href="#DruidUtil-java" class="headerlink" title="DruidUtil.java"></a>DruidUtil.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Acui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年05月22日 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 利用反射机制加载数据库配置文件， 放到 properties 中</span></span><br><span class="line">        InputStream is = DBUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// 继承 Hashtable, 线程安全的 map</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">// 利用 DruidDataSourceFactory 创建数据源</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Acui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/5/22 11:19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> javax.sql.DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池中的一个连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Acui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/5/22 11:21</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.sql.Connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Acui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/5/22 14:47</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn  与特定数据库的连接（会话）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res   表示数据库结果集的数据表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pstmt 预编译 SQL 语句的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, ResultSet res, PreparedStatement pstmt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pstmt.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="DruidTest-java"><a href="#DruidTest-java" class="headerlink" title="DruidTest.java"></a>DruidTest.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">utilTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        DruidUtil druidUtil = <span class="keyword">new</span> DruidUtil();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = druidUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                Integer id = resultSet.getInt(<span class="string">&quot;empno&quot;</span>);</span><br><span class="line">                String ename = resultSet.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + ename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            druidUtil.release(connection, resultSet,preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">五月 22, 2022 3:04:00 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">7369	SIMITH</span><br><span class="line">7499	ALLEN</span><br><span class="line">7521	WARD</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据库 Druid Java</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题笔记</title>
    <url>/2022/05/20/%E7%AE%97%E6%B3%95%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找也称为折半查找，每次都能将查找区间减半，这种折半特性的算法时间复杂度为 O(logN)。</p>
<span id="more"></span>

<h3 id="正常版本"><a href="#正常版本" class="headerlink" title="正常版本"></a>正常版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input:[1,2,3,4,5] key = 3</span><br><span class="line">return the index : 2</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, h = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; h) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (h - l) / <span class="number">2</span>; <span class="comment">// (l + h) / 2 可能出现加法溢出</span></span><br><span class="line">		<span class="keyword">if</span> (nums[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; key) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            h = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 错误码，表示没找到</span></span><br><span class="line">    <span class="comment">// return l; //  将key 插入 nums 的正确位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h3><p>二分查找可以有很多变种，实现变种要注意<strong>边界值</strong>的判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找 key 在有重复元素的数组中的最左位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, h = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; h) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (h - l) / <span class="number">2</span>; </span><br><span class="line">		<span class="keyword">if</span> (nums[mid] &gt;= key) &#123;</span><br><span class="line">            h = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// nums[mid] &lt; key</span></span><br><span class="line">            l = mid + <span class="number">1</span>；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在 h 的赋值表达式为 h = m 的情况下</strong>，如果循环条件为 l &lt;= h，那么会出现循环无法退出的情况，因此<strong>循环条件只能是 l &lt; h</strong>。下面展示了死循环</p>
<figure class="highlight v"><table><tr><td class="code"><pre><span class="line">nums = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, key = <span class="number">1</span></span><br><span class="line">l   m   h</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>  nums[m] &gt;= key</span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>  nums[m] &lt; key</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>   <span class="number">1</span>  nums[m] &gt;= key</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>   <span class="number">1</span>  nums[m] &gt;= key</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="邻接表构建模板"><a href="#邻接表构建模板" class="headerlink" title="邻接表构建模板"></a>邻接表构建模板</h3><p><a href="https://leetcode-cn.com/problems/course-schedule/">207.课程表</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//邻接表 为一个二维数组，每个数组代表一个节点，里面存放与该节点相邻的节点</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; ajacency = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) </span><br><span class="line">    ajacency.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] cp : prerequisites) </span><br><span class="line">    ajacency.get(cp[<span class="number">1</span>]).add(cp[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>


<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>函数在运行时调用自己</p>
<ul>
<li>终止条件      必要，否则会 StackOverFlow</li>
<li>递之前的操作</li>
<li>递下去          时光流逝</li>
<li>归回来          时光倒流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recursion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lifetime = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Recursion().recursion(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; lifetime) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            recursion(++i);</span><br><span class="line">            System.out.print(i - <span class="number">1</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;reverse&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">reverse</span><br><span class="line">9 8 7 6 5 4 3 2 1 0</span><br></pre></td></tr></table></figure>

<h3 id="递归题目"><a href="#递归题目" class="headerlink" title="递归题目"></a>递归题目</h3><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2; </span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1; <span class="comment">// 终止条件 当两个链表都为空时，表示对链表已合并完成</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断 l1 和 l2 头结点哪个更小，然后较小结点的 next 指针指向其余结点的合并结果。（调用递归）</span></span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        reverse(s, <span class="number">0</span>, s.length- <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">return</span>; <span class="comment">// 终止条件</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递之前的操作</span></span><br><span class="line">        <span class="keyword">char</span> t = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = t;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递下去</span></span><br><span class="line">        reverse(s, i + <span class="number">1</span>, j - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归回来</span></span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>题目包含 <strong>最</strong> 字眼</p>
<p>动态规划题目分析的 4 个步骤：</p>
<ul>
<li>确定状态<ul>
<li>研究最优策略的最后一步</li>
<li>化为子问题</li>
</ul>
</li>
<li>转移方程<ul>
<li>根据子问题定义得到</li>
</ul>
</li>
<li>初始条件和边界情况</li>
<li>计算顺序</li>
</ul>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>子序列：原始序列通过删除某些字符得到，不一定连续</p>
<p>子串：    连续</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">- 确定状态  dp[i][j] 表示 s1[:i] 和 s2[:j] 的最长公共子序列长度</span></span><br><span class="line"><span class="comment">  - 研究最优策略的最后一步</span></span><br><span class="line"><span class="comment">  - 化为子问题</span></span><br><span class="line"><span class="comment">- 转移方程</span></span><br><span class="line"><span class="comment">  - 根据子问题定义得到</span></span><br><span class="line"><span class="comment">  当 s1[i] == s2[j] 时，dp[i][j] = dp[i - 1][j - 1] + 1;  考虑 ac  bc  0 + 1</span></span><br><span class="line"><span class="comment">  当 s1[i] != s2[j] 时，dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);  考虑 ace  bc </span></span><br><span class="line"><span class="comment">- 初始条件和边界情况   dp[0][j] = 0 dp[i][0] = 0</span></span><br><span class="line"><span class="comment">- 计算顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LCS</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = s1.length(), n = s2.length();</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = s1.charAt(i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c2 = s2.charAt(j - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLength</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = nums1.length, n = nums2.length;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                ans = Math.max(ans, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// solution1 O(n^2)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> longest = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        longest = Math.max(longest, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// solution2  dp + 二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> longest = <span class="number">0</span>;  <span class="comment">// lengthOfLIS  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = longest;</span><br><span class="line">        <span class="comment">// 找 num 在 [0, longest] 中的插入位置</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = i + (j - i) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= num) j = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; num) i = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = num; <span class="comment">// 插入 num</span></span><br><span class="line">        <span class="keyword">if</span> (j == ret) longest++; <span class="comment">// 如果插入位置在末尾 则 longest 加 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打家劫舍1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *- 确定状态 ：dp[i] 表示第 i 个屋子能偷到的最大数值</span></span><br><span class="line"><span class="comment">          - 研究最优策略的最后一步</span></span><br><span class="line"><span class="comment">          - 化为子问题</span></span><br><span class="line"><span class="comment">	- 转移方程 ： dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])</span></span><br><span class="line"><span class="comment">  		- 根据子问题定义得到</span></span><br><span class="line"><span class="comment">    - 初始条件和边界情况</span></span><br><span class="line"><span class="comment">    - 计算顺序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> pre1 = <span class="number">0</span>, pre2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = Math.max(pre2 + num, pre1);</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DFS模板"><a href="#DFS模板" class="headerlink" title="DFS模板"></a>DFS模板</h2><p><a href="https://leetcode.cn/problems/max-area-of-island/">695. 岛屿的最大面积</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] directions = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;; <span class="comment">// 上下左右</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                maxArea = Math.max(maxArea, dfs(grid, i, j)); <span class="comment">// 最大岛屿面积</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> landNum = <span class="number">0</span>; <span class="comment">// 最大岛屿数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    dfs(grid, i, j);</span><br><span class="line">                    landNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= m || c &lt; <span class="number">0</span> || c &gt;= n || grid[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 终止条件</span></span><br><span class="line">        &#125;</span><br><span class="line">        grid[r][c] = <span class="number">0</span>; <span class="comment">// 标记访问过的点</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 四个方向深搜</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] d : directions) &#123;</span><br><span class="line">            ret += dfs(grid, r + d[<span class="number">0</span>], c + d[<span class="number">1</span>]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= m || c &lt; <span class="number">0</span> || c &gt;= n || grid[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 终止条件</span></span><br><span class="line">        &#125;</span><br><span class="line">        grid[r][c] = <span class="number">0</span>; <span class="comment">// 标记访问过的点</span></span><br><span class="line">        <span class="comment">// 四个方向深搜</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] d : directions) &#123;</span><br><span class="line">            dfs(grid, r + d[<span class="number">0</span>], c + d[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BFS模板"><a href="#BFS模板" class="headerlink" title="BFS模板"></a>BFS模板</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BFS模板</span></span><br><span class="line"><span class="comment">// 题目一般包含 最短 最小 最少 等字眼，且为无权图</span></span><br><span class="line"><span class="comment">// 类似层序遍历 root为起始节点，N 为总结点  可用来解决无权图最短路径问题，N 为图中节点数的数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    Queue&lt;T&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// 队列 用来存放每一轮遍历得到的节点</span></span><br><span class="line">    <span class="keyword">boolean</span>[] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[N]; <span class="comment">// 标记 标记遍历过的节点，防止重复遍历</span></span><br><span class="line">    </span><br><span class="line">    queue.add(root);</span><br><span class="line">    marked[root] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> pathLenth = <span class="number">0</span>; <span class="comment">// 路径数  每遍历一轮 +1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        pathLenth++;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            T cur = queue.poll();</span><br><span class="line">            <span class="keyword">for</span> (T next : root的相邻节点) &#123;</span><br><span class="line">                <span class="keyword">if</span> (next 抵达终点) &#123;</span><br><span class="line">                    <span class="keyword">return</span> pathLenth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (next 超出边界条件 || marked[next]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.add(next);</span><br><span class="line">                marked[next] = <span class="keyword">true</span>;<span class="comment">// 标记 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="回溯模板"><a href="#回溯模板" class="headerlink" title="回溯模板"></a>回溯模板</h2> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function">def <span class="title">backtrack</span><span class="params">(路径, 选择列表)</span>:</span></span><br><span class="line"><span class="function">    <span class="keyword">if</span> 满足结束条件:</span></span><br><span class="line"><span class="function">        result.<span class="title">add</span><span class="params">(路径)</span></span></span><br><span class="line"><span class="function">        return</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">for</span> 选择 in 选择列表:</span></span><br><span class="line"><span class="function">        做选择</span></span><br><span class="line"><span class="function">        <span class="title">backtrack</span><span class="params">(路径, 选择列表)</span></span></span><br><span class="line"><span class="function">        撤销选择</span></span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全排列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        dfs(nums, path, used);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.size() == nums.length) ret.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            dfs(nums, path, used);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>什么时候使用 used 数组，什么时候使用 begin 变量</strong></p>
<p>排列问题，讲究顺序（即 [2, 2, 3] 与 [2, 3, 2] 视为不同列表时），需要记录哪些数字已经使用过，此时用 used 数组；<br>组合问题，不讲究顺序（即 [2, 2, 3] 与 [2, 3, 2] 视为相同列表时），需要按照某种顺序搜索，此时使用 begin 变量。</p>
<p><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组合总和</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;Integer&gt; combine = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        dfs(candidates, ret, target, combine, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates, List&lt;List&lt;Integer&gt;&gt; ret, <span class="keyword">int</span> target, List&lt;Integer&gt; combine, <span class="keyword">int</span> begin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            ret.add(<span class="keyword">new</span> ArrayList&lt;&gt;(combine));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            combine.add(candidates[i]);</span><br><span class="line">            dfs(candidates, ret, target - candidates[i], combine, i);</span><br><span class="line">            combine.remove(combine.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></p>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 【滑动窗口】 </span></span><br><span class="line"><span class="comment">    右指针递增</span></span><br><span class="line"><span class="comment">    记录左指针下一个不重复的位置，遇到重复字符移动左指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>; right &lt; s.length(); right++) &#123;</span><br><span class="line">        <span class="keyword">char</span> cR = s.charAt(right);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(cR)) &#123;</span><br><span class="line">            left = Math.max(map.get(cR) + <span class="number">1</span>, left);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(cR, right);</span><br><span class="line">        res = Math.max(right - left + <span class="number">1</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快排-切分-patition"><a href="#快排-切分-patition" class="headerlink" title="快排 切分 patition"></a>快排 切分 patition</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">patition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h &gt; l) &#123;</span><br><span class="line">        <span class="keyword">int</span> randomIndex = l + <span class="number">1</span> + random.nextInt(h - l);</span><br><span class="line">        swap(nums, l, randomIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = l, j = h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((nums[++i] &lt; nums[l]) &amp;&amp; i != h);</span><br><span class="line">        <span class="keyword">while</span>((nums[--j] &gt; nums[l]) &amp;&amp; j != l);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums, l, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">qpow1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            ans *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        a *= a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字型字符 - 数字</span></span><br><span class="line"><span class="keyword">char</span> a = <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> b = a - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>)(b+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符-索引（0-25）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">char2Index</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String.indexOf(char c, int a);返回此字符串中第一次出现指定字符的索引，从指定索引开始搜索。</span></span><br><span class="line">String s = <span class="string">&quot;abcabc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> c = s.indexOf(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(c); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="矩阵方向"><a href="#矩阵方向" class="headerlink" title="矩阵方向"></a>矩阵方向</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] direction = &#123;&#123;<span class="number">1</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="排序比较器-lambda-表达式"><a href="#排序比较器-lambda-表达式" class="headerlink" title="排序比较器 lambda 表达式"></a>排序比较器 lambda 表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一维</span></span><br><span class="line">Arrays.sort(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维  int[][] gird;  按照第二维排序</span></span><br><span class="line">Arrayas.sort(grid, Comparator.comparingInt(o -&gt; o[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会出错[[-2147483646,-2147483645],[2147483646,2147483647]]  最好用Comparator.comparingInt（o -&gt;&#123;&#125;）</span></span><br><span class="line">Arrays.sort(grid, (o1, o2) -&gt; o1[<span class="number">1</span>] - o2[<span class="number">1</span>]); </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">input：date 字符串  2022--05-25</span></span><br><span class="line"><span class="string">return : Wednesday</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWeekDay</span>(<span class="params">date</span>):</span></span><br><span class="line">    ss = date.split(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ss) &gt; <span class="number">3</span>:</span><br><span class="line">        ret = <span class="string">&quot;illegal&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ret = datetime.date(<span class="built_in">int</span>(ss[<span class="number">0</span>]), <span class="built_in">int</span>(ss[<span class="number">1</span>]), <span class="built_in">int</span>(ss[<span class="number">2</span>])).strftime(<span class="string">&quot;%A&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        ret = <span class="string">&quot;illegal&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getWeekDay(<span class="string">&#x27;2022-5-25&#x27;</span>))</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式微服务商城笔记</title>
    <url>/2021/04/22/gulimall%20%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="分布式微服务商城笔记"><a href="#分布式微服务商城笔记" class="headerlink" title="分布式微服务商城笔记"></a>分布式微服务商城笔记</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>自己听课的笔记和代码</p>
<h5 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h5><p>B2C模式(Business to Consumer)</p>
<h5 id="项目技术"><a href="#项目技术" class="headerlink" title="项目技术"></a>项目技术</h5><ul>
<li>前后分离、</li>
<li>Spring cloud</li>
<li>监控、限流、网关、熔断 分布式</li>
</ul>
<span id="more"></span>

<h5 id="项目微服务架构图"><a href="#项目微服务架构图" class="headerlink" title="项目微服务架构图"></a>项目微服务架构图</h5><p><img src="https://gitee.com/cui_xinfeng/images/blob/master/test/20210422164252.png" alt="image-20210325143607057"></p>
<p>首先系统分为<strong>内网部署</strong>和<strong>外网部署</strong>，外网就是手机、电脑等客户端，客户端发送的请求（如登录、注册等）由<code>ngnix</code>集群转交给后台：首先转交给<code>Webflux</code>网关(<code>Spring Cloud Gateway</code>) ,网关根据<strong>动态路由</strong>找到相应服务，如果服务众多，还应<strong>负载均衡</strong>(<code>Ribbon</code>)调用相应服务，如果服务出现问题也可以由网关进行<strong>服务熔断、降级、限流</strong>(<code>Sentinal</code>)；<strong>认证功能</strong>(<code>OAuth2.0</code>)用来判断请求是否合法。</p>
<p>当请求通过网关到达相应服务后进行处理，服务与服务之间用<code>Feign</code>进行相互调用。若有些请求需要登陆之后才能进行处理，用<code>OAuth2.0</code>进行处理，除了一般登录还整合了<strong>社交登录</strong>，由<code>Spring Security</code>进行整个应用的<strong>安全权限控制</strong>。</p>
<p>服务要存储的数据或缓存方面：使用了<code>Redis</code>(缓存)、<code>MySQL</code>(主从分离)、使用消息队列(<code>RabbitMQ</code>)进行异步解耦完成消息的<strong>最终一致性</strong></p>
<p><strong>检索方面：使用<code>ElasticSearch</code>进行全文检索</strong></p>
<p>服务要存储图片、视频等对象时使用阿里云的<code>OSS</code><strong>对象存储服务</strong></p>
<p>项目上线后，为了快速定位项目中可能出现的问题 ，用<code>ELK</code>对日志进行处理，也就是用<code>LogStash</code>来收集业务中的各种日志并将其导入到<code>ES</code>中，然后用<code>Klbana</code>可视化界面检索日志信息，以快速定位问题所在。</p>
<p>分布式方面，用<code>Spring Cloud Alibaba Nacos</code>作为<strong>服务注册中心</strong>、<strong>配置中心</strong>(一处配置，处处调用)。<strong>链路追踪</strong>使用<code>Sleuth+Zipkin</code>,获取服务的链路信息后交给开源的<code>Prometheus</code>进行聚合分析，再由<code>Grafana</code>进行可视化展示，并通过<code>AlertManager</code>使用邮件或短信的方式告知开发者。</p>
<p>而且，还提供了**持续集成和持续部署(CI/CD)**，由于系统的服务众多，修改代码后每次打包部署很麻烦，有了CI/CD后，开发者修改代码后可以将代码发布到远程仓库(如<code>github</code>)，然后运维人员可以通过运维工具<code>Jenkins Pipeline</code> 从<code>github</code>中获取代码并打包成Docker镜像，最终使用K8S将项目整合到Docker容器中。</p>
<h5 id="微服务划分图"><a href="#微服务划分图" class="headerlink" title="微服务划分图"></a>微服务划分图</h5><p><img src="https://gitee.com/cui_xinfeng/images/raw/master/test/20210325152313583.png" alt="image-20210325152313583"></p>
<p>前端：</p>
<ul>
<li>admin-vue：面向工作人员的后台管理系统</li>
<li>shop-vue: 面向公众访问的web网站系统</li>
</ul>
<p>后端：</p>
<ul>
<li><p>业务微服务群</p>
<ul>
<li>商品服务：crud、商品详情、上下架</li>
<li>支付服务</li>
<li>优惠服务</li>
<li>用户服务</li>
<li>仓储服务</li>
<li>秒杀服务</li>
<li>订单服务</li>
<li>检索服务</li>
<li>中央认证服务：登录注册、单点登录、社交登录</li>
<li>购物车服务： 商品crud、结账</li>
<li>后台管理：新增商品优惠等</li>
</ul>
</li>
<li><p>第三方服务</p>
<ul>
<li>物流、短信、金融、身份认证</li>
</ul>
</li>
<li><p>服务治理</p>
<ul>
<li>SpringCloud Alibaba: Nacos注册中心+配置中心、Seata分布式事务、Sentinel服务容错</li>
<li>SpringCloud: Feign远程调用&amp;负载均衡、Gateway网关、Sleuth服务追踪、Zipkin 可视化追踪</li>
</ul>
</li>
<li><p>应用监控</p>
<ul>
<li>Prometheus + Grafana</li>
</ul>
</li>
<li><p>数据支撑层</p>
<ul>
<li>redis、mysql、ShardingSphere（对数据库进行分库分表操作）、RabbitMQ、ElasticSearch、阿里云OSS</li>
</ul>
</li>
</ul>
<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><h6 id="centos7虚拟机"><a href="#centos7虚拟机" class="headerlink" title="centos7虚拟机"></a>centos7虚拟机</h6><p>virtualbox + vagrant</p>
<p>####### 端口转发</p>
<p>修改配置文件使虚拟机拥有固定ip</p>
<p>D:\Users\Acui\Vagrantfile</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot;</span><br></pre></td></tr></table></figure>

<p>重启虚拟机，查看虚拟机的ip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit;</span><br><span class="line">vagrant reload</span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>可以看到ip已经修改为192.168.56.10。</p>
<p>主机和虚拟机相互ping一下来检查是否成功。</p>
<h6 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h6><p>Docker基于镜像，可以秒级启动各种容器，每一种容器都是一个完整的运行环境，容器之间互相隔离。</p>
<p><a href="https://hub.docker.com/">官方镜像网站 </a></p>
<p><a href="https://docs.docker.com/engine/install/centos/">官方安装教程</a></p>
<p>安装完毕后使用如下命令检查是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[vagrant@localhost ~]$ sudo systemctl start docker</span><br><span class="line">[vagrant@localhost ~]$ sudo docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机自启动</span></span><br><span class="line">[vagrant@localhost ~]$ sudo systemctl enable docker </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -----------------------------docker使用---------------------------------</span></span><br><span class="line">docker -v</span><br><span class="line">docker images</span><br><span class="line">docker info</span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行中(所有)容器</span></span><br><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 / 删除 容器</span></span><br><span class="line">docker run xx</span><br><span class="line">docker rm xx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动/停止/重启/自启 容器</span></span><br><span class="line">docker start xx</span><br><span class="line">docker stop xx</span><br><span class="line">docker restart xx</span><br><span class="line">docker update xx --restart=always</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器内部</span></span><br><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>



<p>####### 设置docker镜像加速</p>
<p><a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">阿里云镜像加速</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://******.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>*******填你自己的地址</p>
<h6 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo docker pull [image]:[version]</span> </span><br><span class="line">sudo docker pull mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创造实例并启动</span></span><br><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">-p 3306:3306：将容器的3306 端口映射到主机的3306 端口</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql/：将配置文件夹挂载到主机</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root：初始化root 用户的密码</span><br><span class="line">-d mysql:5.7：后台运行</span><br></pre></td></tr></table></figure>

<p>####### MySQL配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">注意：解决MySQL 连接慢的问题</span><br><span class="line">在配置文件中加入如下，并重启mysql</span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">解释：</span><br><span class="line">skip-name-resolve：跳过域名解析</span><br></pre></td></tr></table></figure>

<h6 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h6><p>1、下载镜像文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p>2、创建实例并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>docker使用redis客户端连接命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# docker exec -it redis redis-cli                                 27.0.0.1:6379&gt; set a b                                                                 OK                                                                                     127.0.0.1:6379&gt; get a                                                                 &quot;b&quot; </span><br></pre></td></tr></table></figure>

<p>redis默认存在内存，重启后就没了，设置redis持久化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# pwd                                                                                   /mydata/redis/conf</span><br><span class="line">[root@localhost conf]# vi redis.conf</span><br><span class="line">​```</span><br><span class="line">appendonly yes</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<p>redis 可视化界面  “<strong>Redis Desktop Manager</strong>“</p>
<p><a href="https://redis.io/topics/config">redis官方配置样例</a></p>
<h5 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h5><h6 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h6><p>1、Maven配置阿里云镜像加速</p>
<p>配置文件路径：<strong>maven安装路径\conf\settings.xml</strong></p>
<p><a href="https://maven.aliyun.com/mvn/guide">阿里云镜像官方配置指南</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- D:\Program Files\devsoft\apache-maven-3.6.3\conf\settings.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置jdk1.8编译</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h6><p>安装Lombok和Mybatisx插件</p>
<h6 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h6><p>Vscode 安装开发必备插件<br><strong>Vetur</strong> —— 语法高亮、智能感知、Emmet 等<br>包含格式化功能， Alt+Shift+F （格式化全文），Ctrl+K Ctrl+F（格式化选中代码，两个Ctrl<br>需要同时按着）<br><strong>EsLint</strong> —— 语法纠错<br><strong>Auto Close Tag</strong> —— 自动闭合HTML/XML 标签<br><strong>Auto Rename Tag</strong> —— 自动完成另一侧标签的同步修改<br><strong>JavaScript(ES6) code snippets</strong> — — ES6 语法智能提示以及快速输入， 除js 外还支<br>持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含js 代码文件的时间<br><strong>HTML CSS Support</strong> —— 让html 标签上写class 智能提示当前项目所支持的样式<br><strong>HTML Snippets</strong> —— html 快速自动补全<br><strong>Open in browser —</strong>— 浏览器快速打开<br><strong>Live Server</strong> —— 以内嵌服务器方式打开<br><strong>Chinese (Simplified) Language Pack for Visual Studio Code</strong> —— 中文语言包</p>
<h6 id="git-码云"><a href="#git-码云" class="headerlink" title="git + 码云"></a>git + 码云</h6><p>下载git 码云填写公钥</p>
<h6 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h6><p>1、导入项目逆向工程<br>2、下载人人开源后台管理系统脚手架工程<br>(1) 导入工程，创建数据库<br>(2) 修改工程shiro 依赖为SpringSecurity<br>(3) 删除部分暂时不需要的业务<br>3、下载人人开源后台管理系统vue 端脚手架工程<br>(1) vscode 导入前端项目<br>(2) 前后端联调测试基本功能</p>
<h6 id="创建各个微服务及数据库"><a href="#创建各个微服务及数据库" class="headerlink" title="创建各个微服务及数据库"></a>创建各个微服务及数据库</h6><h6 id="人人开源快速开发脚手架-代码生成器"><a href="#人人开源快速开发脚手架-代码生成器" class="headerlink" title="人人开源快速开发脚手架 + 代码生成器"></a>人人开源快速开发脚手架 + 代码生成器</h6><p><a href="https://gitee.com/renrenio">gitee地址</a></p>
<p>####### 脚手架</p>
<p>克隆renren-fast-vue和renren-fast到本地，删除.git文件夹</p>
<ol>
<li><p>将renren-fast复制到项目中，在父pom中加入子模块，修改application.properties的数据库信息，启动项目。打开<a href="http://localhost:8080/renren-fast/">http://localhost:8080/renren-fast/</a></p>
</li>
<li><p>安装<a href="https://nodejs.org/dist/v10.16.3/">node.js 10.16.3</a></p>
</li>
<li><p>使用vscode(使用管理员)打开renren-fast-vue文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install # 安装依赖，未使用管理员模式会报错</span><br><span class="line">npm run dev # 运行项目</span><br></pre></td></tr></table></figure>

<p>打开<a href="http://localhost:8001/">http://localhost:8001</a></p>
</li>
</ol>
<p>####### 代码生成器</p>
<p>克隆renren-generator到本地，删除.git文件夹</p>
<ol>
<li><p>将renren-generator复制到项目中，在父POM中加入子模块</p>
</li>
<li><p>```xml</p>
<!-- pom.xml(renren-generator) -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.8.RELEASE</version>
    <relativePath/>
</parent>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 修改配置文件的数据库信息 以pms库为例</span><br><span class="line"></span><br><span class="line">4. 修改generator.properties的信息</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;yaml</span><br><span class="line">   #代码生成器，配置信息</span><br><span class="line">   </span><br><span class="line">   mainPath&#x3D;com.atguigu</span><br><span class="line">   #包名</span><br><span class="line">   package&#x3D;com.atguigu.gulimall</span><br><span class="line">   moduleName&#x3D;product</span><br><span class="line">   #作者</span><br><span class="line">   author&#x3D;cuixinfeng</span><br><span class="line">   #Email</span><br><span class="line">   email&#x3D;xinfeng.cui@foxmail.com</span><br><span class="line">   #表前缀(类名不会包含表前缀)</span><br><span class="line">   tablePrefix&#x3D;pms_</span><br></pre></td></tr></table></figure></li>
<li><p>启动项目<a href="http://localhost:80，全选-生成代码">http://localhost:80，全选-生成代码</a></p>
</li>
<li><p>将生成的代码中的main替换原项目中的main</p>
</li>
</ol>
<h4 id="微服务技术搭配方案"><a href="#微服务技术搭配方案" class="headerlink" title="微服务技术搭配方案"></a>微服务技术搭配方案</h4><ul>
<li><p>SpringCloud Alibaba - Nacos : 配置中心、注册中心</p>
</li>
<li><p>SpringCloud Alibaba - Sentinal ： 服务容错</p>
</li>
<li><p>SpringCloud Alibaba - Seata：分布式事务解决方案</p>
</li>
<li><p>SpringCloud - Ribbon ： 负载均衡</p>
</li>
<li><p>SpringCloud - Feign ： 声明式Http客户端（调用远程服务）</p>
</li>
<li><p>SpringCloud - Gateway：API网关</p>
</li>
<li><p>SpringCloud - Sleuth：链路追踪</p>
</li>
</ul>
<h4 id="Nacos-注册中心"><a href="#Nacos-注册中心" class="headerlink" title="Nacos - 注册中心"></a>Nacos - 注册中心</h4><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme-zh.md">Nacos Discovery Example</a></p>
<ol>
<li><p>安装<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a>  下载zip</p>
</li>
<li><p>解压后启动<code>~\nacos-server-1.1.3\nacos\bin\startup.cmd</code></p>
</li>
<li><p>pom.xml(common)</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>application.yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-cupon</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>主启动类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCouponApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GulimallCouponApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Feign-远程调用"><a href="#Feign-远程调用" class="headerlink" title="Feign- 远程调用"></a>Feign- 远程调用</h4><p>如何调用远程服务</p>
<ol>
<li>引入open-feign</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写接口，告诉spring cloud这个接口需要调用远程服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">membercoupons</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明接口的每个方法都是调用的哪个远程服务的哪个请求</p>
<ol start="3">
<li>开启远程调用功能</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;主启动类</span><br><span class="line">@EnableFeignClients(basePackages &#x3D; &quot;com.atguigu.gulimall.member.feign&quot;)</span><br></pre></td></tr></table></figure>

<p>basePackages 自动扫描该包下的所有带有@FeignClient注解的接口，从而注册服务</p>
<h4 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos - 配置中心"></a>Nacos - 配置中心</h4><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md">Nacos Config Example</a></p>
<ol>
<li><p>引入依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--服务配置中心--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>bootstrap.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="http://localhost:8848/nacos/#/configeditor?serverId=center&dataId=gulimall-coupon.properties&group=DEFAULT_GROUP&namespace=&edasAppName=&edasAppId=&searchDataId=&searchGroup=">在Nacos中添加.properties配置文件</a></p>
</li>
<li><p>动态获取配置需要在Controller添加@RefreshScope注解 属性加@Value(“${配置项的名}$“)</p>
<p>如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用配置中心的配置。</p>
</li>
</ol>
<h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><ul>
<li><p>命名空间：配置隔离</p>
<p>默认是public（保留空间），默认新增的所有配置都在public空间</p>
</li>
</ul>
<ol>
<li><p>利用命名空间做<strong>环境隔离</strong>：开发 、测试、生产</p>
<p>注意：在<code>bootstrap.properties</code>中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">60747c88-54db-4020-b5c0-e924081a822b</span></span><br><span class="line"><span class="comment"># 60747c88-54db-4020-b5c0-e924081a822b为所需环境的唯一id，在nacos中查看 默认为public</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>微服务隔离</strong>：每一个微服务都创建自己的命名空间，每一个微服务都创建自己的命名空间，只加载自己命名空间下的配置</p>
</li>
</ol>
<ul>
<li><p>配置集：所有配置的集合</p>
</li>
<li><p>配置集ID：类似配置文件名  <code>Data ID</code></p>
</li>
<li><p>配置分组：默认所有的配置集都属于default_group</p>
<p>新建配置时可分配Group如（1111），在<code>bootstrap.properties</code>中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">1111</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>实践：每个微服务创建自己的命名空间，利用分组隔离环境</p>
<h5 id="同时加载多个配置集"><a href="#同时加载多个配置集" class="headerlink" title="同时加载多个配置集"></a>同时加载多个配置集</h5><ol>
<li><p>微服务任何配置信息，任何配置文件都可以放在配置中心</p>
</li>
<li><p>只需要在<code>bootstrap.properties</code>中说明加载哪些配置文件即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[2].data-id</span>=<span class="string">other.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>@Value,@ConfigurationProperties…等以前SpringBoot任何方法从配置文件中获取值，都能使用，且优先使用配置中心的内容。</p>
</li>
<li><p>更多信息查看<a href="https://nacos.io/zh-cn/docs/quick-start.html">Nacos官网</a></p>
</li>
</ol>
<h4 id="Gateway-网关"><a href="#Gateway-网关" class="headerlink" title="Gateway - 网关"></a>Gateway - 网关</h4><p><a href="https://spring.io/projects/spring-cloud-gateway">SpringCloud Gateway官网</a></p>
<h5 id="Gateway-流程"><a href="#Gateway-流程" class="headerlink" title="Gateway 流程"></a>Gateway 流程</h5><p>一句话：当请求到达网关，网关先利用断言(<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#glossary">Predicate</a>)来判断该请求是否符合某个路由规则，如果符合就按指定规则将其路由到指定服务(期间要经过一系列Filter进行过滤)。</p>
<p>![Gateway 处理过程](D:\workspace\blog\myBlog\source_posts\gulimall 笔记.assets\spring_cloud_gateway_diagram.png)</p>
<h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><ol>
<li><p>开启服务注册发现(先启动Nacos)，配置Nacos的注册中心地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.properties</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848 #服务中心</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">88</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bootstrap.properties</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848 	#配置中心</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">f35fbe39-0231-42f2-90ca-1b662e7dd739</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置路由规则</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#路由列表</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span>  <span class="comment">#满足断言后要访问的网址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,baid</span> <span class="comment">#Query断言，当url=baidu时符合断言规则，后者可以时正则表达式</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,qq</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动应用，查看<a href="http://localhost:88/?url=baidu%E6%98%AF%E5%90%A6%E8%83%BD%E8%B7%B3%E8%BD%AC%E7%99%BE%E5%BA%A6%E3%80%82">http://localhost:88/?url=baidu是否能跳转百度。</a></p>
</li>
</ol>
<h4 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h4><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><p>ECMAScript 是浏览器脚本语言的规范，而各种我们熟知的js 语言，如JavaScript 则是规范的具体实现。</p>
<h6 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h6><p>用vscode打开一个空的文件夹，新建一个html文件，快捷键<code>shift+!</code>会自动生成html模板。<code>Alt+Shfit+F</code>代码格式化。</p>
<h4 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h4><ol>
<li><p>安装</p>
<p>新建空文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y  #初始化为npm 管理的工程，完成后会出现package.json文件</span><br><span class="line">npm install vue  #安装vue，完成后出现node_modules</span><br></pre></td></tr></table></figure>

<p>引入，新建html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="vue模块化开发"><a href="#vue模块化开发" class="headerlink" title="vue模块化开发"></a>vue模块化开发</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、全局安装webpack</span></span><br><span class="line">npm install webpack -g</span><br><span class="line"><span class="meta">#</span><span class="bash">2、全局安装vue脚手架</span></span><br><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="meta">#</span><span class="bash">3、初始化vue项目</span>  </span><br><span class="line">vue init webpack appname #vue 脚手架使用webpack模板初始化一个appname项目</span><br><span class="line"><span class="meta">#</span><span class="bash">4、启动vue项目</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置跨域访问"><a href="#配置跨域访问" class="headerlink" title="配置跨域访问"></a>配置跨域访问</h4><p>gateway模块新建配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gateway.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallCorsConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line"></span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p><img src="https://gitee.com/cui_xinfeng/images/raw/master/test/20210406175021973.png" alt="image-20210406175021973"></p>
<h5 id="SpringCloud-Alibaba-OSS"><a href="#SpringCloud-Alibaba-OSS" class="headerlink" title="SpringCloud Alibaba-OSS"></a>SpringCloud Alibaba-OSS</h5><p>对象存储服务</p>
<p><a href="https://github.com/alibaba/aliyun-spring-boot/blob/master/aliyun-spring-boot-samples/aliyun-oss-spring-boot-sample/README-zh.md#aliyun-spring-boot-oss-%E7%A4%BA%E4%BE%8B">Aliyun Spring Boot OSS 示例</a></p>
<ol>
<li>引入starter</li>
<li>配置key，endpoint等相关信息</li>
<li>使用OSSClient进行相关操作</li>
</ol>
<h5 id="服务端签名后直传"><a href="#服务端签名后直传" class="headerlink" title="服务端签名后直传"></a>服务端签名后直传</h5><p>![签名上传](D:\workspace\blog\myBlog\source_posts\gulimall 笔记.assets\p139016.png)</p>
<h4 id="JSR303后端校验"><a href="#JSR303后端校验" class="headerlink" title="JSR303后端校验"></a>JSR303后端校验</h4><ol>
<li><p>给Bean添加校验注解, 如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//javax.validation.constraints; 注解在这个包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//品牌名至少包含一个非空格字符</span></span><br><span class="line"><span class="comment">//@NotBlank</span></span><br><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名必须提交&quot;)</span>	<span class="comment">//自定义提示信息</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li>
<li><p>在Controller中添加@Valid注解，以及自定义返回结果</p>
</li>
<li><p>给校验的bean后紧跟一个BindingResult，就可以获取到校验的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">//@RequiresPermissions(&quot;product:brand:save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BrandEntity brand, BindingResult result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.getFieldErrors().forEach((item)-&gt;&#123;</span><br><span class="line">            String msg = item.getDefaultMessage();</span><br><span class="line">            <span class="comment">//发生错误的字段名</span></span><br><span class="line">            String field = item.getField();</span><br><span class="line">            map.put(field, msg);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>, <span class="string">&quot;提交数据不合法&quot;</span>).put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        brandService.save(brand);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>统一的异常处理：</p>
<ol>
<li>编写异常处理类，使用@RestControllerAdvice</li>
<li>使用@ExceptionHandler标注方法可以处理的异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gulimall.product.exeception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Acui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年04月07日 8:55</span></span><br><span class="line"><span class="comment"> * 集中处理所有异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.atguigu.gulimall.product.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleValidationException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());</span><br><span class="line">        BindingResult bindingResult = e.getBindingResult();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        bindingResult.getFieldErrors().forEach((fieldError) -&gt; &#123;</span><br><span class="line">            errorMap.put(fieldError.getField(), fieldError.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>, <span class="string">&quot;数据校验出现问题&quot;</span>).put(<span class="string">&quot;data&quot;</span>, errorMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>, throwable.getMessage(), throwable.getClass());</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>分组校验</p>
<ol>
<li><p>给校验注解标注什么情况需要进行校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名必须提交&quot;, groups = &#123;AddGroup.class,UpdateGroup.class&#125;)</span></span><br><span class="line"><span class="comment">//UpdateGroup是一个自定义接口，里面啥也没写</span></span><br></pre></td></tr></table></figure></li>
<li><p>```java<br>@Validated(AddGroup.class)//替换上文Controller中的@Valid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   3. 默认没有指定分组的校验注解@NotBlank, 在分组校验的情况下（@Validated(AddGroup.class)）不生效；只会在@Validated情况下生效</span><br><span class="line"></span><br><span class="line">##### 自定义校验</span><br><span class="line"></span><br><span class="line">1. 编写一个自定义的校验注解</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;java</span><br><span class="line">   package com.atguigu.common.valid;</span><br><span class="line">   </span><br><span class="line">   &#x2F;**</span><br><span class="line">    * 自定义校验注解，验证字段的值是否在给定数组内</span><br><span class="line">    * 如：</span><br><span class="line">    * &#x2F;&#x2F;验证showStatus的值是否为 0 或 1</span><br><span class="line">    * @ListValues(vals&#x3D;&#123;0,1&#125;, groups &#x3D; &#123;AddGroup.class&#125;)</span><br><span class="line">    * private Integer showStatus;</span><br><span class="line">    *</span><br><span class="line">    * @author Acui</span><br><span class="line">    * @date 2021&#x2F;4&#x2F;7 10:18</span><br><span class="line">    *</span><br><span class="line">    *&#x2F;</span><br><span class="line">   @Documented</span><br><span class="line">   @Constraint(validatedBy &#x3D; &#123; ListValueConstraintValidator.class&#125;)&#x2F;&#x2F;使用哪个校验器进行校验的，【可以指定多个不同的校验器，适配不同类型的校验】</span><br><span class="line">   @Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;) &#x2F;&#x2F;该注解可以标注在哪些位置</span><br><span class="line">   @Retention(RUNTIME) &#x2F;&#x2F; 获取时机，运行时</span><br><span class="line">   &#x2F;&#x2F;@Repeatable(List.class)</span><br><span class="line">   public @interface ListValues &#123;</span><br><span class="line">       &#x2F;&#x2F;出错信息去哪找</span><br><span class="line">       String message() default &quot;&#123;com.atguigu.common.valid.ListValues.message&#125;&quot;;</span><br><span class="line">   </span><br><span class="line">       &#x2F;&#x2F;支持分组校验</span><br><span class="line">       Class&lt;?&gt;[] groups() default &#123; &#125;;</span><br><span class="line">   </span><br><span class="line">       &#x2F;&#x2F;支持负载</span><br><span class="line">       Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span><br><span class="line">   </span><br><span class="line">       int[] vals() default &#123; &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>编写一个自定义的约束验证器 ConstraintValidator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.common.valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Acui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年04月07日 10:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListValueConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">ListValues</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ListValues constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] vals = constraintAnnotation.vals();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : vals) &#123;</span><br><span class="line">            set.add(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否校验成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要校验的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Integer value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> set.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>关联自定义的校验注解和约束验证器 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class&#125;)</span><span class="comment">//使用哪个校验器进行校验的</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="SPU与SKU"><a href="#SPU与SKU" class="headerlink" title="SPU与SKU"></a>SPU与SKU</h4><ol>
<li><p>SPU：Standard Product Unit（标准化产品单元）<br>是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。</p>
</li>
<li><p>SKU：Stock Keeping Unit（库存量单位）<br>即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。SKU 这是对于大型连锁超市<br>DC（配送中心）物流管理的一个必要的方法。现在已经被引申为产品统一编号的简称，每<br>种产品均对应有唯一的SKU 号。</p>
</li>
</ol>
<h4 id="Object-划分"><a href="#Object-划分" class="headerlink" title="Object 划分"></a>Object 划分</h4><ol>
<li><p>PO(persistant object) 持久对象<br>PO 就是对应<strong>数据库中某个表中的一条记录</strong>，多个记录可以用PO 的集合。PO 中应该不包含任何对数据库的操作。</p>
</li>
<li><p>DO（Domain Object）领域对象<br>就是从现实世界中抽象出来的有形或无形的业务实体。</p>
</li>
<li><p>TO(Transfer Object) ，数据传输对象<br>不同的应用程序之间传输的对象</p>
</li>
<li><p>DTO（Data Transfer Object）数据传输对象<br>这个概念来源于J2EE 的设计模式，原来的目的是为了EJB 的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，泛指用于展示层与服务层之间的数据传输对象。</p>
</li>
<li><p>VO(value object) 值对象<br>通常用于业务层之间的数据传递，和PO 一样也是仅仅包含数据而已。但应是抽象出的业务对象, 可以和表对应, 也可以不, 这根据业务的需要。用new 关键字创建，由GC 回收的。<br>View object：视图对象；<br>接受页面传递来的数据，封装对象将业务处理完成的对象，封装成页面要用的数据</p>
</li>
<li><p>BO(business object) 业务对象<br>从业务模型的角度看, 见UML 元件领域模型中的领域对象。封装业务逻辑的java 对象, 通过调用DAO 方法, 结合PO,VO 进行业务操作。business object: 业务对象主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。比如一个简历，有教育经历、工作经历、社会关系等等。我们可以把教育经历对应一个PO ，工作经历对应一个PO ，社会关系对应一个PO 。建立一个对应简历的BO 对象处理简历，每个BO 包含这些PO 。这样处理业务逻辑时，我们就可以针对BO 去处理。</p>
</li>
<li><p>POJO(plain ordinary java object) 简单无规则java 对象<br>传统意义的java 对象。就是说在一些Object/Relation Mapping 工具中，能够做到维护数据库表记录的persisent object 完全是一个符合Java Bean 规范的纯Java 对象，没有增加别的属性和方法。我的理解就是最基本的java Bean ，只有属性字段及setter 和getter方法！。<br>POJO 是DO/DTO/BO/VO 的统称。</p>
</li>
<li><p>DAO(data access object) 数据访问对象<br>是一个sun 的一个标准j2ee 设计模式， 这个模式中有个接口就是DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法, 结合PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合VO, 提供数据库的CRUD 操作.</p>
</li>
</ol>
<h4 id="Elastic-Search-全文检索"><a href="#Elastic-Search-全文检索" class="headerlink" title="Elastic Search - 全文检索"></a>Elastic Search - 全文检索</h4><p><a href="https://www.elastic.co/cn/elasticsearch/">Elastic Search官网</a></p>
<p>基础概念 - 对应MySQL</p>
<ul>
<li>索引 - 数据库</li>
<li>类型 - 表</li>
<li>文档 - 数据</li>
</ul>
<p><strong>倒排索引机制</strong>使得全文检索很快。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
        <tag>spring cloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-learning-note</title>
    <url>/2022/05/28/redis-learning-note/</url>
    <content><![CDATA[<h1 id="Redis-笔记"><a href="#Redis-笔记" class="headerlink" title="Redis 笔记"></a>Redis 笔记</h1><p><a href="redis.io">Redis 官网</a></p>
<p><a href="http://redis.cn/commands.html">redis 命令</a></p>
<span id="more"></span>
<p>linux虚拟机 密码： 11071999iuc</p>
<p>Docker 安装Redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启自启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">docker pull redis：6.0.8</span><br><span class="line">docker images</span><br><span class="line">docker run -p 6379:6379 --name myredis -v /usr/local/docker/redis.conf:/etc/redis/redis.conf -v /usr/local/docker/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash">进入 redis 容器 fb547a3478d5</span></span><br><span class="line">docker exec -it 容器id/服务名 redis-cli</span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> -it fb547a3478d5 redis-cli</span></span><br><span class="line">auth 123456</span><br></pre></td></tr></table></figure>

<h2 id="redis-传统五大数据结构及应用"><a href="#redis-传统五大数据结构及应用" class="headerlink" title="redis 传统五大数据结构及应用"></a>redis 传统五大数据结构及应用</h2><h3 id="String（字符）"><a href="#String（字符）" class="headerlink" title="String（字符）"></a>String（字符）</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>set key value</li>
<li>get key</li>
<li>同时设置、获取多个  mset k1 v1 k2 v2 …   mget k1 k2 …</li>
<li>数字增减  <ul>
<li>递增  incr key</li>
<li>增加指定数值 incrby key increment</li>
<li>递减 decr key</li>
<li>减少指定数值 decrby key decrement</li>
</ul>
</li>
<li>获取字符串长度 STRLEN key</li>
<li><strong>分布式锁</strong><ul>
<li>setnx key value  <ul>
<li>setnx (set if not exist)  key 不存在才创建 key</li>
</ul>
</li>
<li>set key value [EX seconds] [PX millsenconds] [NX] [XX]<ul>
<li>EX: key 在多少秒之后过期</li>
<li>PX：key 在多少毫秒之后过期</li>
<li>NX：当 key 不存在时，才创建 key，效果等同于 setnx </li>
<li>XX：当 key 存在时，覆盖 key</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol>
<li>商品编号、订单编号采用 INCR 命令生成</li>
<li>点赞</li>
</ol>
<h3 id="Hash（散列，map）"><a href="#Hash（散列，map）" class="headerlink" title="Hash（散列，map）"></a>Hash（散列，map）</h3><p>redis 中的 hash 对应 Java 中的 <strong>Map&lt;String, Map&lt;Object, Object&gt;&gt;</strong></p>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>一次设置一个字段值 hset key field value   比如  hset person name cuixinfeng</li>
<li>一次获取一个字段值 hget key field          比如 hget person name</li>
<li>一次设置多个字段值 hmset key field value [field value …]</li>
<li>一次获取多个字段值  hmget key field [field …]</li>
<li>获取所有字段值 hgetall key  </li>
<li>获取某个key内的全部数量</li>
<li>删除一个key hdel</li>
</ul>
<h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>购物车  早期，当前中小厂可用</p>
<ul>
<li>新增 hset shopcar：uid1024 224477 1</li>
<li>增加 hincrby shopcar:uid1024 224477 1</li>
<li>总数 hlen shopcar:uid1024 </li>
<li>全选 hgetall shopcar:uid1024 </li>
</ul>
<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>LPUSH key value</li>
<li>RPUSH key value</li>
<li>LRANGE key start stop</li>
<li>LLEN key</li>
</ul>
<h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><p>微信文章订阅公众号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush subarticle:uid1010 11 22</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange subarticle:uid1010 0 -1</span><br><span class="line">1) &quot;22&quot;</span><br><span class="line">2) &quot;11&quot;</span><br></pre></td></tr></table></figure>

<p> subarticle:uid1010 表示uid为1010的用户的订阅文章</p>
<p>11 22 分别代表两篇不同文章</p>
<p>lrange subarticle:uid1010 0 -1 表示展示用户订阅的所有文章</p>
<h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>SADD</li>
<li>SREM</li>
<li>SMEMBERS</li>
<li>SISMEMBER</li>
<li>SCARD</li>
<li>SRANDMEMBER</li>
<li>SPOP</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set1 1 1 1 2 3 4 5 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; SREM set1 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set1</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;4&quot;</span><br><span class="line">4) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER set1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER set1 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SCARD set1</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; SPOP set1</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; SPOP set1 2</span><br><span class="line">1) &quot;4&quot;</span><br><span class="line">2) &quot;5&quot;</span><br></pre></td></tr></table></figure>

<p>集合运算 交并补</p>
<ul>
<li>sdiff  A-B</li>
<li>sunion A∪B</li>
<li>sinter A∩B</li>
</ul>
<h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><ol>
<li><p>微信抽奖小程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key 1 2 3 4 5 6 7 8 9 10 # 共10 个人抽奖</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; scard key # 查看参加人数</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER key 2 # 随机抽 2 个人，元素不删除</span><br><span class="line">1) &quot;4&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop key 3 # 随机抽 3 个人，元素删除</span><br><span class="line">1) &quot;6&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;4&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>微信朋友圈点赞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD pub:msgId z3 l4 w5 # 新增对某个消息点赞的人</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SREM pub:msgId z3 # 取消点赞</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS pub:msgId # 查看所有点赞的人</span><br><span class="line">1) &quot;w5&quot;</span><br><span class="line">2) &quot;l4&quot;</span><br><span class="line">127.0.0.1:6379&gt; scard pub:msgId # 统计所有点赞人数</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER pub:msgId w5 # 判断某个用户是否对某个消息点赞</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li>
<li><p>微博好友关注社交关系  <strong>共同关注</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd acui 1 2 3 4 5 # acui关注的人</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SADD zhoujielun 2 3 4 7 8 # 周杰伦关注的人</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SINTER acui zhoujielun # 取交集，共同关注的人</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;4&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>QQ内推可能认识的人</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD s1 1 2 3 4 5 # s1 的好友</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SADD s2 2 3 4 5 6 # s2 的好友</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SDIFF s1 s2 # s2 可能认识的人</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; SDIFF s2 s1 # s1 可能认识的人</span><br><span class="line">1) &quot;6&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="SortedSet（有序集合，简称-zSet）"><a href="#SortedSet（有序集合，简称-zSet）" class="headerlink" title="SortedSet（有序集合，简称 zSet）"></a>SortedSet（有序集合，简称 zSet）</h3><p>为 set 中添加带有 score 的元素，可以按照 score 排序</p>
<h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4><p>排行榜</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD goods:sellsort 9 1001 15 1002 # 商品编号1001的销量是9，商品编号1002的销量是15</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY goods:sellsort 2 1001 # 有一个客户买了 2 件 1001，1001销量加 2</span><br><span class="line">&quot;11&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE goods:sellsort 0 10 withscores # 求商品销量前 10 名</span><br><span class="line">1) &quot;1001&quot;</span><br><span class="line">2) &quot;11&quot;</span><br><span class="line">3) &quot;1002&quot;</span><br><span class="line">4) &quot;15&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE goods:sellsort 0 10 withscores # 大的在前</span><br><span class="line">1) &quot;1002&quot;</span><br><span class="line">2) &quot;15&quot;</span><br><span class="line">3) &quot;1001&quot;</span><br><span class="line">4) &quot;11&quot;</span><br></pre></td></tr></table></figure>

<h3 id="其它类型"><a href="#其它类型" class="headerlink" title="其它类型"></a>其它类型</h3><p>Bitmap（位图）</p>
<p>HyperLogLog（统计）</p>
<p>GEO（地理）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在redis 客户端，可以使用 <span class="built_in">help</span> @[类型] 来查看文档</span></span><br><span class="line">127.0.0.1:6379&gt; help @string</span><br><span class="line"></span><br><span class="line">APPEND key value</span><br><span class="line">summary: Append a value to a key</span><br><span class="line">since: 2.0.0</span><br><span class="line"></span><br><span class="line">BITCOUNT key [start end]</span><br><span class="line">summary: Count set bits in a string</span><br><span class="line">since: 2.6.0</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>分布式锁是指在分布式微服务架构下，拆分后的各个微服务之间为了避免冲突和数据故障而加入的一种锁</p>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h5><p>建两个module </p>
<p>boot-redis01 boot-redis02  除了端口号都一样</p>
<p>业务类 实现减库存业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy_goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);<span class="comment">// ==get(key) 看库存够不够</span></span><br><span class="line">        <span class="keyword">int</span> goodNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> realNumber = goodNumber - <span class="number">1</span>; <span class="comment">// 库存够，卖一个</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, String.valueOf(realNumber));</span><br><span class="line">            log.info(<span class="string">&quot;成功买到商品， 库存还剩下【&#123;&#125;】件，\t 服务端口为【&#123;&#125;】&quot;</span>, realNumber, serverPort);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;成功买到商品\t, 服务端口为&quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;商品售罄、活动结束、欢迎下次光临，\t服务端口为【&#123;&#125;】&quot;</span>, serverPort);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品售罄、活动结束、欢迎下次光临&quot;</span> + <span class="string">&quot;\t服务端口为:&quot;</span>+serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h5><h6 id="v1-0-没有加锁，并发下数字不对，会出现超卖现象"><a href="#v1-0-没有加锁，并发下数字不对，会出现超卖现象" class="headerlink" title="v1.0 没有加锁，并发下数字不对，会出现超卖现象"></a>v1.0 没有加锁，并发下数字不对，会出现超卖现象</h6><ul>
<li><p>synchronized        “”不见不散””</p>
</li>
<li><p>ReentrantLock     与synchronized 不同，ReentrantLock    不会一直阻塞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">// ReentrantLock 用法1</span></span><br><span class="line"><span class="comment">//        lock.lock();</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//            //... method body</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        lock.unlock();</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        //ReentrantLock 用法2</span></span><br><span class="line"><span class="comment">//        if (lock.tryLock()) &#123; // 尝试获取锁</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                // manipulate protected state</span></span><br><span class="line"><span class="comment">//            &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//                lock.unlock();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            // perform alternative actions</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //ReentrantLock 用法3</span></span><br><span class="line"><span class="comment">//        if (lock.tryLock(2000, TimeUnit.MILLISECONDS)) &#123; // 超时等待,给一个规定时间，拿不到锁就放弃</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                // manipulate protected state</span></span><br><span class="line"><span class="comment">//            &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//                lock.unlock();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            // perform alternative actions</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="加入-ngnix-代理"><a href="#加入-ngnix-代理" class="headerlink" title="加入 ngnix 代理"></a>加入 ngnix 代理</h6><p>docker 安装 ngnix</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ngnix</span><br><span class="line"></span><br><span class="line">docker run </span><br><span class="line"></span><br><span class="line">mkdir -p /root/nginx/www /root/nginx/logs /root/nginx/conf</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">docker cp 876b34885be5:/etc/nginx/nginx.conf /root/nginx/conf</span><br><span class="line"></span><br><span class="line">docker run -d -p 80:80 --name nginx-web -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx.conf</span></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置负载均衡  weight 为权重</span></span><br><span class="line">    <span class="attribute">upstream</span> mynginx&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.47.32:1111</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.47.32:2222</span> weight=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>      <span class="number">192.168.136.130</span>;</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 反向代理</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://mynginx;</span><br><span class="line">            <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Jmeter 压力测试</p>
<ul>
<li>添加 线程组（100个线程  1s 循环 1 次）</li>
<li>添加 HTTP 请求 <a href="http://192.168.136.130/buy_goods">http://192.168.136.130/buy_goods</a></li>
</ul>
<p>结果出现超卖现象，同一个商品被卖多次</p>
<h6 id="v2-0-分布式下超卖问题"><a href="#v2-0-分布式下超卖问题" class="headerlink" title="v2.0 分布式下超卖问题"></a>v2.0 分布式下超卖问题</h6><p>解决  利用 redis 的 setnx （set if not exist）,并保证锁的释放</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;MinusStockLock&quot;</span>; <span class="comment">// 向redis中添加一个 key 为 “MinusStockLock” 的元素模拟锁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy_goods</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String uniqValue = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, uniqValue);<span class="comment">//相当于 set Nx</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;抢锁失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//... 正常减库存</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK); <span class="comment">// 解锁 出现异常可能无法释放锁，必须在代码层面保证锁的释放，也就是放到finally中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="v3-0-服务器宕机，代码没有走到-finally，没办法保证解锁，需要加入一个过期时间限定-key"><a href="#v3-0-服务器宕机，代码没有走到-finally，没办法保证解锁，需要加入一个过期时间限定-key" class="headerlink" title="v3.0 服务器宕机，代码没有走到 finally，没办法保证解锁，需要加入一个过期时间限定 key"></a>v3.0 服务器宕机，代码没有走到 finally，没办法保证解锁，需要加入一个过期时间限定 key</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, uniqValue); <span class="comment">// 相当于 set Nx</span></span><br><span class="line">stringRedisTemplate.expire(REDIS_LOCK, <span class="number">10L</span>, TimeUnit.SECONDS); <span class="comment">// 加入一个过期时间限定 key</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="v4-0-加锁与设置过期时间不是一个原子操作"><a href="#v4-0-加锁与设置过期时间不是一个原子操作" class="headerlink" title="v4.0 加锁与设置过期时间不是一个原子操作"></a>v4.0 加锁与设置过期时间不是一个原子操作</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, uniqValue, <span class="number">10L</span>, TimeUnit.SECONDS);<span class="comment">//相当于 setnx  保证加锁与设置过期时间的原子性</span></span><br></pre></td></tr></table></figure>



<h6 id="v5-0-张冠李戴，误删了别人的锁-redis-分布式锁在删除的时候的注意事项"><a href="#v5-0-张冠李戴，误删了别人的锁-redis-分布式锁在删除的时候的注意事项" class="headerlink" title="v5.0 张冠李戴，误删了别人的锁  (redis 分布式锁在删除的时候的注意事项)"></a>v5.0 张冠李戴，误删了别人的锁  (redis 分布式锁在删除的时候的注意事项)</h6><p>如 A 线程执行过程中，MinusStockLock 锁过期了，B 线程进来，A 最终会删掉 B 的锁</p>
<p><img src="D:\workspace\vscode\leetcode\src\main\java\redisLearning\README.assets\image-20220524154131135.png" alt="image-20220524154131135"></p>
<p>判断 value 是否是自己的，决定是否删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (stringRedisTemplate.opsForValue().get(REDIS_LOCK).equals(uniqValue)) &#123;</span><br><span class="line">        stringRedisTemplate.delete(REDIS_LOCK); <span class="comment">// 解锁 出现异常可能无法释放锁，必须在代码层面保证锁的释放，也就是放到finally中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="v6-0-判断和删除不是原子性的"><a href="#v6-0-判断和删除不是原子性的" class="headerlink" title="v6.0 判断和删除不是原子性的"></a>v6.0 判断和删除不是原子性的</h6><p>解决 </p>
<ul>
<li>lua 脚本</li>
<li>redis 事务</li>
</ul>
<p>redis 事务</p>
<ul>
<li><p><code>MULTI </code> <code>EXEC</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI#标志事务的开始</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v11</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v22</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC # 相当于 MySQL 的提交</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br></pre></td></tr></table></figure></li>
<li><p><code>WATCH</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 中间有人加塞也不会影响客户端 A 事务的执行，会覆盖其它人</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 A</span></span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v111</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v222</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 B</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 abc</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;abc&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 A</span></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">127.0.0.1:6379&gt; GET k1</span><br><span class="line">&quot;v111&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> WATCH 用法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正常流程</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; WATCH k1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 AAA</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 AAA</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 异常流程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 A</span></span><br><span class="line">127.0.0.1:6379&gt; WATCH k1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 11</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 22</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 B</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 BBB # 中途修改 k1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;abc&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 A</span></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(nil)  # 发现 k1 被修改返回 null</span><br></pre></td></tr></table></figure>

<p>用redis事务解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        stringRedisTemplate.watch(REDIS_LOCK);</span><br><span class="line">        <span class="keyword">if</span> (stringRedisTemplate.opsForValue().get(REDIS_LOCK).equalsIgnoreCase(uniqValue)) &#123;</span><br><span class="line">            stringRedisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">            stringRedisTemplate.multi();</span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">            List&lt;Object&gt; list = stringRedisTemplate.exec();</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.unwatch();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>用 lua 脚本解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    Jedis jedis = RedisUtils.getJedis();</span><br><span class="line"></span><br><span class="line">    String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] &quot;</span> +</span><br><span class="line">        <span class="string">&quot;then &quot;</span> +</span><br><span class="line">        <span class="string">&quot;return redis.call(&#x27;del&#x27;, KEYS[1]) &quot;</span> +</span><br><span class="line">        <span class="string">&quot;else &quot;</span> +</span><br><span class="line">        <span class="string">&quot;return 0 &quot;</span> +</span><br><span class="line">        <span class="string">&quot;end&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object o = jedis.eval(script, Collections.singletonList(REDIS_LOCK), Collections.singletonList(uniqValue));</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(o.toString())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------del redis lock ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------del redis lock error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedis) &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="如何保证执行时间小于过期时间——缓存时间续约"><a href="#如何保证执行时间小于过期时间——缓存时间续约" class="headerlink" title="如何保证执行时间小于过期时间——缓存时间续约"></a>如何保证执行时间小于过期时间——缓存时间续约</h6><h6 id="集群模式下-redis-和-zookeeper-的-CAP-对比"><a href="#集群模式下-redis-和-zookeeper-的-CAP-对比" class="headerlink" title="集群模式下 redis 和 zookeeper 的 CAP 对比"></a>集群模式下 redis 和 zookeeper 的 CAP 对比</h6><p>A C 不可兼得</p>
<p>redis ：</p>
<ul>
<li>AP 高可用 分区容错</li>
<li>异步复制可能造成锁丢失，如： 主节点没来得及把刚刚set进来的这条数据给从节点，就挂了</li>
</ul>
<p>zookeeper：</p>
<ul>
<li>CP 强一致 分区容错</li>
</ul>
</li>
</ul>
<h6 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h6><p>redis 集群下，要使用 RedLock（redis 分布式锁） 之 Redisson 落地实现</p>
<h6 id="Redisson-版本"><a href="#Redisson-版本" class="headerlink" title="Redisson 版本"></a>Redisson 版本</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Redisson <span class="title">redisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">            .setAddress(<span class="string">&quot;redis://192.168.136.130:6379&quot;</span>)</span><br><span class="line">            .setDatabase(<span class="number">0</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK = <span class="string">&quot;MinusStockLock&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy_goods</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RLock redissonLock = redisson.getLock(REDIS_LOCK);</span><br><span class="line">        redissonLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 减库存</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 保证要释放的锁是当前线程持有的锁</span></span><br><span class="line">            <span class="keyword">if</span> (redissonLock.isLocked() &amp;&amp; redissonLock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                redissonLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="reddisson-看门口机制"><a href="#reddisson-看门口机制" class="headerlink" title="reddisson 看门口机制"></a>reddisson 看门口机制</h6><h4 id="分布式锁总结"><a href="#分布式锁总结" class="headerlink" title="分布式锁总结"></a>分布式锁总结</h4><h2 id="缓存过期淘汰策略"><a href="#缓存过期淘汰策略" class="headerlink" title="缓存过期淘汰策略"></a>缓存过期淘汰策略</h2><ul>
<li><p>查看Redis 最大内存  配置文件 redis.conf  64位默认最大内存，32位3G</p>
</li>
<li><p>生产设置   不超过四分之三</p>
</li>
<li><p>```nginx<br>maxmemory <bytes></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- redis 内存满了会怎样  **OOM**</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;shell</span><br><span class="line">  (error) OOM command not allowed when used memory &gt; &#39;maxmemory&#39;.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h2>]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>面试重点问题</title>
    <url>/2021/04/22/%E9%9D%A2%E8%AF%95%E9%87%8D%E7%82%B9%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><span id="more"></span>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>谷粒商城2021.03 - 2021.05<br>应用技能: Spring Cloud（Nacos、Sentinal、Ribbon、Feign、Gateway）、Redis、MySQL、Docker<br>项目描述: 谷粒商城是一个仿京东商城的 B2C 模式的微服务项目，主要用到了Spring Cloud技术。<br>主要工作:</p>
<ol>
<li>配置分布式开发环境，使用阿里云服务器搭建Docker、Java、MySQL环境、使用 Git 进行版本控制；</li>
<li>使用人人开源脚手架逆向生成 entity、xml、dao、service、vue 等代码，节省开发时间；</li>
<li>编写后端微服务业务群，主要有商品服务、用户服务、仓储服务、订单服务；</li>
<li>使用 vue 编写前端页面，分为面向公众和管理员的系统；</li>
<li>使用 Redis 作为缓存，ElasticSearch 作为全文检索。<br> 个人收获: 通过该项目使我对 Spring Cloud 一揽子解决方案有了初步的了解，学会的使用和配置相关技术，同时也提高了我解<br> 决 bug 的能力。</li>
</ol>
<h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 熟练使用 Java 进行编程，基本功扎实，熟悉 Python，SQL 等；</li>
<li><input checked="" disabled="" type="checkbox"> 熟悉常见的数据结构和算法，如十大排序（冒泡排序、快速排序、归并排序等）； </li>
<li><input checked="" disabled="" type="checkbox"> 熟悉计算机网络，如 OSI 七层模型、掌握 HTTP、TCP/UDP、IP 等常见协议；</li>
<li><input disabled="" type="checkbox"> 熟悉计算机操作系统，如进程间的调度算法、进程同步等问题；</li>
<li><input disabled="" type="checkbox"> 熟悉 Linux 环境下的常见命令及相关开发工具的使用（如Docker、MySQL等）；</li>
<li><input disabled="" type="checkbox"> 了解常见的数据库 MySQL/Redis，了解 Redis 底层通信模型；</li>
<li><input disabled="" type="checkbox"> 了解SpringBoot、Spring Cloud等常用开发框架。</li>
</ul>
<h1 id="问题整理"><a href="#问题整理" class="headerlink" title="问题整理"></a>问题整理</h1><h2 id="项目问题"><a href="#项目问题" class="headerlink" title="项目问题"></a>项目问题</h2><h3 id="cRPC框架"><a href="#cRPC框架" class="headerlink" title="cRPC框架"></a>cRPC框架</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><h4 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化 / 反序列化"></a>序列化 / 反序列化</h4><h4 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h4><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>gulimall（谷粒商城） 是一个综合性的B2C平台，包括前台商城系统以及后台管理系统，基于 SpringCloud + SpringCloudAlibaba + MyBatis-Plus实现，采用 Docker 容器化部署。</p>
<p>前台商城系统包括：</p>
<ul>
<li><p><input disabled="" type="checkbox">  用户登录、注册;</p>
</li>
<li><p><input disabled="" type="checkbox">  商品搜索、</p>
</li>
<li><p><input disabled="" type="checkbox">  商品详情、</p>
</li>
<li><p><input disabled="" type="checkbox">  购物车、</p>
</li>
<li><p><input disabled="" type="checkbox">  下订单流程、</p>
</li>
<li><p><input disabled="" type="checkbox">  秒杀活动等模块</p>
</li>
</ul>
<p>后台管理系统包括：</p>
<ul>
<li><p><input disabled="" type="checkbox">  系统管理、</p>
</li>
<li><p><input disabled="" type="checkbox">  商品系统、</p>
</li>
<li><p><input disabled="" type="checkbox">  优惠营销、</p>
</li>
<li><p><input disabled="" type="checkbox">  库存系统、</p>
</li>
<li><p><input disabled="" type="checkbox">  订单系统、</p>
</li>
<li><p><input disabled="" type="checkbox">  用户系统、</p>
</li>
<li><p><input disabled="" type="checkbox">  内容管理</p>
</li>
</ul>
<p>等七大模块。</p>
<h4 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gulimall</span><br><span class="line">├── gulimall-common -- 工具类及通用代码</span><br><span class="line">├── renren-generator -- 人人开源项目的代码生成器</span><br><span class="line">├── gulimall-auth-server -- 认证中心（社交登录、OAuth2.0、单点登录）*</span><br><span class="line">├── gulimall-cart -- 购物车服务*</span><br><span class="line">├── gulimall-coupon -- 优惠卷服务</span><br><span class="line">├── gulimall-gateway -- 统一配置网关</span><br><span class="line">├── gulimall-order -- 订单服务</span><br><span class="line">├── gulimall-product -- 商品服务</span><br><span class="line">├── gulimall-search -- 检索服务</span><br><span class="line">├── gulimall-seckill -- 秒杀服务 *</span><br><span class="line">├── gulimall-third-party -- 第三方服务</span><br><span class="line">├── gulimall-ware -- 仓储服务 </span><br><span class="line">└── gulimall-member -- 会员服务</span><br></pre></td></tr></table></figure>

<h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>后端技术</p>
<table>
<thead>
<tr>
<th>技术</th>
<th>说明</th>
<th>官网</th>
</tr>
</thead>
<tbody><tr>
<td>SpringBoot</td>
<td>容器+MVC框架</td>
<td><a href="https://gitee.com/link?target=https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></td>
</tr>
<tr>
<td>SpringCloud</td>
<td>微服务架构</td>
<td><a href="https://gitee.com/link?target=https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></td>
</tr>
<tr>
<td>SpringCloudAlibaba</td>
<td>一系列组件</td>
<td><a href="https://gitee.com/link?target=https://spring.io/projects/spring-cloud-alibaba">https://spring.io/projects/spring-cloud-alibaba</a></td>
</tr>
<tr>
<td>MyBatis-Plus</td>
<td>ORM框架</td>
<td><a href="https://gitee.com/link?target=https://mp.baomidou.com">https://mp.baomidou.com</a></td>
</tr>
<tr>
<td>renren-generator</td>
<td>人人开源项目的代码生成器</td>
<td><a href="https://gitee.com/renrenio/renren-generator">https://gitee.com/renrenio/renren-generator</a></td>
</tr>
<tr>
<td>Elasticsearch</td>
<td>搜索引擎</td>
<td><a href="https://gitee.com/link?target=https://github.com/elastic/elasticsearch">https://github.com/elastic/elasticsearch</a></td>
</tr>
<tr>
<td>RabbitMQ</td>
<td>消息队列</td>
<td><a href="https://gitee.com/link?target=https://www.rabbitmq.com">https://www.rabbitmq.com</a></td>
</tr>
<tr>
<td>Springsession</td>
<td>分布式缓存</td>
<td><a href="https://gitee.com/link?target=https://projects.spring.io/spring-session">https://projects.spring.io/spring-session</a></td>
</tr>
<tr>
<td>Redisson</td>
<td>分布式锁</td>
<td><a href="https://gitee.com/link?target=https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></td>
</tr>
<tr>
<td>Docker</td>
<td>应用容器引擎</td>
<td><a href="https://gitee.com/link?target=https://www.docker.com">https://www.docker.com</a></td>
</tr>
<tr>
<td>OSS</td>
<td>对象云存储</td>
<td><a href="https://gitee.com/link?target=https://github.com/aliyun/aliyun-oss-java-sdk">https://github.com/aliyun/aliyun-oss-java-sdk</a></td>
</tr>
</tbody></table>
<p>前端技术</p>
<table>
<thead>
<tr>
<th>技术</th>
<th>说明</th>
<th>官网</th>
</tr>
</thead>
<tbody><tr>
<td>Vue</td>
<td>前端框架</td>
<td><a href="https://gitee.com/link?target=https://vuejs.org">https://vuejs.org</a></td>
</tr>
<tr>
<td>Element</td>
<td>前端UI框架</td>
<td><a href="https://gitee.com/link?target=https://element.eleme.io">https://element.eleme.io</a></td>
</tr>
<tr>
<td>thymeleaf</td>
<td>模板引擎</td>
<td><a href="https://gitee.com/link?target=https://www.thymeleaf.org">https://www.thymeleaf.org</a></td>
</tr>
<tr>
<td>node.js</td>
<td>服务端的js</td>
<td><a href="https://gitee.com/link?target=https://nodejs.org/en">https://nodejs.org/en</a></td>
</tr>
</tbody></table>
<h3 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h3><p>三级分类</p>
<p>spu 和 sku  （款 和 件）</p>
<h3 id="高并发秒杀超卖问题"><a href="#高并发秒杀超卖问题" class="headerlink" title="高并发秒杀超卖问题"></a>高并发秒杀超卖问题</h3><p><a href="https://www.cnblogs.com/wenbochang/p/10912459.html"><strong>如何解决高并发秒杀的超卖问题</strong></a></p>
<ol>
<li>MySQL 排他锁（写锁）</li>
<li>版本号，CAS</li>
<li>redis 单线程的单线程 比如商品有100件。那么我在redis存储一个k,v。例如 &lt;gs1001, 100&gt;每一个用户线程进来，key值就减1，等减到0的时候，全部拒绝剩下的请求。</li>
</ol>
<h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><ul>
<li>变化传递 生产者只负责生成并发出数据/事件，消费者来监听并负责定义如何处理数据/事件的变化传递方式。</li>
<li>响应式流 </li>
<li>声明式</li>
</ul>
<p>场景：比如一个<strong>日志监控</strong>系统，我们的前端页面将不再需要通过“命令式”的轮<br>询的方式不断向服务器请求数据然后进行更新，而是在建立好通道之后，数据流从系统源<br>源不断流向页面，从而展现实时的指标变化曲线；再比如一个<strong>社交平台</strong>，朋友的动态、点<br>赞和留言不是手动刷出来的，而是当后台数据变化的时候自动体现到界面上的。</p>
<h3 id="响应式流"><a href="#响应式流" class="headerlink" title="响应式流"></a>响应式流</h3><ol>
<li>阻塞、非阻塞以及同步、异步<ul>
<li>阻塞和非阻塞反映的是<strong>调用者的状态</strong></li>
<li>同步和异步反映的是<strong>服务提供者的能力</strong></li>
</ul>
</li>
<li>流量控制—回压<ul>
<li>在响应式流中，数据流的发出者叫做Publisher，监听者叫做Subscriber。“发布者”和“订阅者”。订阅者向上游反馈流量请求的机制就叫做回压</li>
<li>处理回压的策略<ul>
<li>缓存 将未处理的数据元素缓存起来</li>
<li>丢弃 发布者不需要缓存来不及处理的数据，而是直接丢弃，当订阅者请求数据的时候，会拿到发<br>布者那里最近的一个数据元素</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结：<strong>响应式流（异步非阻塞 + 回压机制）+变化传递 + 声明式范式 = 响应式编程</strong></p>
<h3 id="reactor"><a href="#reactor" class="headerlink" title="reactor"></a>reactor</h3><h3 id="项目中有微服务如何划分的"><a href="#项目中有微服务如何划分的" class="headerlink" title="项目中有微服务如何划分的"></a>项目中有微服务如何划分的</h3><h3 id="说一说某个模块如何实现的"><a href="#说一说某个模块如何实现的" class="headerlink" title="说一说某个模块如何实现的"></a>说一说某个模块如何实现的</h3><p><strong>购物车模块</strong></p>
<p>未登录和已登录状态都可以添加购物车，user-key 不管有没有登录都会放到cookie里，以此来区分用户。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, List&lt;String&gt;&gt; ;  <span class="comment">// redis中的购物车数据结构，</span></span><br><span class="line">Map&lt;用户id, Map&lt;商品id, 购物项&gt;</span><br></pre></td></tr></table></figure>

<p>添加购物车，判断是否登录：</p>
<ul>
<li>是： 添加商品到后台Redis中，把user_id 作为key</li>
<li>否： 添加商品到后台Redis中，把 cookie里的user-key 作为key</li>
</ul>
<p>查看购物车，判断是否登录：</p>
<ul>
<li>否： 根据user-key查</li>
<li>是： 先根据 user-key查， 有数据的话需要先合并，然后再根据user_id查Redis</li>
</ul>
<p><strong>秒杀</strong></p>
<h3 id="单点登录-SSO"><a href="#单点登录-SSO" class="headerlink" title="单点登录 SSO"></a>单点登录 SSO</h3><p>把Session数据放在Redis中（使用Redis模拟Session）</p>
<p>认证中心做一个服务，去认证中心拿到 token 放到 cookie</p>
<h3 id="项目中遇到了哪些问题，你是如何解决的"><a href="#项目中遇到了哪些问题，你是如何解决的" class="headerlink" title="项目中遇到了哪些问题，你是如何解决的"></a>项目中遇到了哪些问题，你是如何解决的</h3><p>秒杀模块一开始简单用synchronized 锁住方法，导致高并发下减库存出现问题，</p>
<p>1.后来用乐观锁进行改进，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">sql</span>语句<span class="operator">-</span> 乐观锁 <span class="operator">-</span> 版本号</span><br><span class="line">update t_good <span class="keyword">set</span> count <span class="operator">=</span> count <span class="operator">-</span> <span class="number">1</span>, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> good_id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>但是这种方法存在性能瓶颈</p>
<ol start="2">
<li>又采用RabbitMQ消息队列来实现削峰限流</li>
</ol>
<h3 id="SpringCloud-与-SpringBoot-的区别"><a href="#SpringCloud-与-SpringBoot-的区别" class="headerlink" title="SpringCloud 与 SpringBoot 的区别"></a>SpringCloud 与 SpringBoot 的区别</h3><ol>
<li>SpringBoot 是一个快速开发框架，使用注解简化了 xml 配置，内置 Servlet 容器，以 Java 应用程序的方式运行</li>
<li>SpringCloud 是一系列框架的集合，可以包含SpringBoot</li>
</ol>
<h3 id="SpringBoot-自动配置原理"><a href="#SpringBoot-自动配置原理" class="headerlink" title="SpringBoot 自动配置原理"></a>SpringBoot 自动配置原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java3yApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Java3yApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@SpringBootApplication</code>等同于下面三个注解：</p>
<ul>
<li><code>@SpringBootConfiguration</code></li>
<li><code>@EnableAutoConfiguration</code></li>
<li><code>@ComponentScan</code></li>
</ul>
<p>其中<code>@EnableAutoConfiguration</code>是关键(启用自动配置)，内部实际上就去加载<code>META-INF/spring.factories</code>文件的信息，然后筛选出以<code>EnableAutoConfiguration</code>为key的数据，加载到IOC容器中，实现自动配置功能！</p>
<h2 id="专业技术问题"><a href="#专业技术问题" class="headerlink" title="专业技术问题"></a>专业技术问题</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="Java1-8的新特性"><a href="#Java1-8的新特性" class="headerlink" title="Java1.8的新特性"></a>Java1.8的新特性</h4><ol>
<li>Interface  可以有静态方法，并且可以有方法体</li>
<li>functional interface 函数式接口 <strong>函数式编程</strong></li>
<li><strong>Lambda 表达式</strong></li>
<li>Stream <ul>
<li><code>Stream</code>依然不存储数据，不同的是它可以检索(Retrieve)和逻辑处理集合数据、包括筛选、排序、统计、计数等。可以想象成是 Sql 语句。</li>
</ul>
</li>
<li>Optional<ul>
<li>解决 NPE 问题</li>
</ul>
</li>
<li><h2 id="Date-Time-API"><a href="#Date-Time-API" class="headerlink" title="Date-Time API"></a>Date-Time API</h2></li>
<li>HashMap 红黑树</li>
</ol>
<h4 id="讲讲Java-中的集合"><a href="#讲讲Java-中的集合" class="headerlink" title="讲讲Java 中的集合"></a>讲讲Java 中的集合</h4><p>Java中的容器分为 Collection 和 Map，Collection 存储对象的集合，Map 用于存放键值对</p>
<p>Collection 中包含 </p>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p><a href="https://blog.csdn.net/qq_37875585/article/details/89340495">https://blog.csdn.net/qq_37875585/article/details/89340495</a></p>
<p><strong>概念</strong>： 反射是在运行状态中，对于任何一个类，都能够知道这个类的所有属性和方法；对于任何一个对象，都能调用它的任意方法和属性；这种动态获取信息和动态调用对象方法的功能称为 Java 语言的反射机制。</p>
<p><strong>应用</strong>：</p>
<ol>
<li>JDBC中，利用反射动态加载了数据库驱动程序。</li>
<li>Web服务器中利用反射调用了Sevlet的服务方法。</li>
<li>Eclispe等开发工具利用反射动态刨析对象的类型与结构，动态提示对象的属性和方法。</li>
<li>很多框架都用到反射机制，注入属性，调用方法，如Spring。</li>
</ol>
<h4 id="J-U-C包-java-util-concurrent"><a href="#J-U-C包-java-util-concurrent" class="headerlink" title="J.U.C包 java.util.concurrent"></a>J.U.C包 java.util.concurrent</h4><p>synchronized volatile ReentrantLock CyclicBarrier Sempher </p>
<h4 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h4><h3 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h3><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>7 个参数： 核心线程数、最大线程数、存活时间、时间单位、阻塞队列、线程工厂、拒绝策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> corePoolSize,					核心线程数</span><br><span class="line"><span class="keyword">int</span> maximumPoolSize,				最大线程数</span><br><span class="line"><span class="keyword">long</span> keepAliveTime,					当前线程数大于核心线程数时，线程存活时间</span><br><span class="line">TimeUnit unit,						存活时间的单位</span><br><span class="line">BlockingQueue&lt;Runnable&gt; workQueue,	阻塞队列，存储等待执行的线程</span><br><span class="line">ThreadFactory threadFactory,		创建线程的工厂</span><br><span class="line">RejectedExecutionHandler handler	拒绝策略，线程池满的时候使用</span><br></pre></td></tr></table></figure>

<p>使用线程池的好处</p>
<ol>
<li>降低资源消耗速度</li>
<li>提高响应时间</li>
<li>提高线程的可管理性</li>
</ol>
<h4 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h4><ol>
<li>继承 Thread 类， 重写 run() 方法， 调用 start()</li>
<li>实现 Runnable 接口，  相当于一个可执行的任务，还是要依赖Thread来执行</li>
<li>实现 Callable  相对于 Runnable，可以有返回值，返回值通过 FutureTask封装</li>
</ol>
<h3 id="数据结构-amp-算法"><a href="#数据结构-amp-算法" class="headerlink" title="数据结构&amp;算法"></a>数据结构&amp;算法</h3><h4 id="说说常见的排序算法和应用场景"><a href="#说说常见的排序算法和应用场景" class="headerlink" title="说说常见的排序算法和应用场景"></a>说说常见的排序算法和应用场景</h4><table>
<thead>
<tr>
<th>排序算法</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>快速排序</td>
<td>大规模的数据排序，并且实际性能要好于归并排序。它的基本原理是从数组中选取一个元素，把所有大于这个元素的数都放到它的后面，所有小于这个元素的数都放到它的前面，然后这个元素就把原数组切分成了两个部分，再分别对这个两个部分进行同样的操作，直到数组不能再切分的时候，此时数组为有序。</td>
</tr>
<tr>
<td>归并排序</td>
<td>外排序 ： 内存放不下时，分开排序，<br/>使用100M内存对于900MB的数据进行排序：<br/>- 读入100M数据内存，用常规方式（如堆排序）排序。<br/>- 将排序后的数据写入磁盘。<br/>。重复前两个步骤，得到9个100MB的块（临时文件）中。<br/>·将100M内存划分为10份，前9份中为输入缓冲区，第10份输出缓冲区。<br/>（如前9份各8M，第10份18M；或10份大小同时为10M）<br/>·执行九路归并算法，将结果输出到缓冲区<br/>（若输出缓冲区满，将数据写至目标文件，清空缓冲区。若输入缓冲区空，读入相应文件的下一份数据）</td>
</tr>
</tbody></table>
<p><img src="D:\Users\Acui\Documents\面向后端开发学习\面试重点问题整理.assets\v2-5fce1634562e2ec0fbe47dd926e325b3_r.jpg" alt="查看源图像"></p>
<h4 id="红黑树的底层"><a href="#红黑树的底层" class="headerlink" title="红黑树的底层"></a>红黑树的底层</h4><p>自平衡的二叉查找树， 通过定义策略来保证自平衡以及<strong>从根节点到叶子节点的最长路径不大于最短路径的2倍</strong>：</p>
<ol>
<li>节点分为红色或者黑色；</li>
<li>根节点必为黑色；</li>
<li>叶子节点都为黑色，且为null；</li>
<li>连接红色节点的两个子节点都为黑色（红黑树不会出现相邻的红色节点）；</li>
<li>从任意节点出发，到其每个叶子节点的路径中包含相同数量的黑色节点；</li>
</ol>
<p>与 平衡二叉树的区别：</p>
<ul>
<li>平衡二叉树通过保持任一节点左、右子树高度差的绝对值不超过1来维持二叉树的平衡；而红黑树是根据查找路径上黑色节点的个数以及红、黑节点之间的联系来维持二叉树的平衡。</li>
<li>平衡二叉树在插入或者删除节点时为了保证左右子树的高度差会进行旋转，这一个旋转根据数据的不同旋转的复杂度也会不一样，所以在插入或者删除平衡二叉树的节点时，旋转的次数不可知，这也导致在频繁的插入、修改中造成的效率问题；红黑树在执行插入修改的操作时会发生旋转与变色（红变黑，或者黑变红）以确保没有一条路径会比其它路径长出两倍。</li>
<li>总体来说，在插入或者删除节点时，红黑树旋转的次数比平衡二叉树少，因此在插入与删除操作比较频繁的情况下，选用红黑树。</li>
</ul>
<h4 id="Vector底层"><a href="#Vector底层" class="headerlink" title="Vector底层"></a>Vector底层</h4><p>List的古老实现类，ArrayList 的线程安全版本，尽量不要使用， 由于大量使用 synchronized 关键字来保证线程安全，所以效率比较低，<strong>最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</strong></p>
<p>替代方案：可以使用 <code>Collections.synchronizedList();</code> 得到一个线程安全的 ArrayList。也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。</p>
<p><strong>扩容实现</strong>：扩充容量的方法ensureCapacityHelper。与ArrayList不同的是，Vector在每次增加元素(可能是1个，也可能是一组)时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就看构造方法中传入的容量增长系数CapacityIncrement是否为0，如果不为0，就设置新的容量为 旧容量 + 容量增长量；如果为0，设置新的容量为旧的容量的2倍，如果设置后的容量还不够，则直接新的容量设置为 旧容量 + 传入参数所需要的容量 而后同样用Arrays.copyof()方法将元素拷贝到新的数组。</p>
<h4 id="4-String-底层"><a href="#4-String-底层" class="headerlink" title="4. String 底层"></a>4. String 底层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[]; <span class="comment">// final 关键字保证不可变   char数组</span></span><br></pre></td></tr></table></figure>

<h4 id="deque底层"><a href="#deque底层" class="headerlink" title="deque底层"></a>deque底层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、ArrayDeque成员变量</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elements; <span class="comment">//元数据数组</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> head;<span class="comment">//队列头部所在位置</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> tail;<span class="comment">//尾部所在位置</span></span><br><span class="line"><span class="comment">//为何要给element数组使用transient修饰，原因和ArrayList一样，就是防止扩容后网络传输没用的数据影响效率。</span></span><br><span class="line"><span class="comment">// 不支持随机访问，用 iterator 迭代</span></span><br></pre></td></tr></table></figure>

<h4 id="各种树-二叉查找树-平衡二叉树-红黑树-B树-B-树-B-树"><a href="#各种树-二叉查找树-平衡二叉树-红黑树-B树-B-树-B-树" class="headerlink" title="各种树 二叉查找树 平衡二叉树 红黑树 B树 B+树 B*树"></a>各种树 二叉查找树 平衡二叉树 红黑树 B树 B+树 B*树</h4><p>树的查找性能取决于树的高度</p>
<ul>
<li><p>二叉查找树 </p>
<p>左子树的值 &lt; 父节点的值，右子树的值 &gt; 父节点的值</p>
<p>极端情况会变成链表，性能变低</p>
</li>
<li><p>平衡二叉树</p>
<p>在二叉查找树，左右子树高度差不超过 &lt;= 1</p>
</li>
<li><p>红黑树 </p>
</li>
<li><p>B树 ：平衡多路查找树</p>
<p>与平衡二叉树的不同就是其查找路径不止两个</p>
</li>
<li><p>B+树 </p>
<ol>
<li>非叶子节点不保存关键字记录的指针，只进行数据索引，</li>
</ol>
</li>
<li><p>B*树</p>
</li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h4><ol>
<li>应用层 HTTP SMTP POP3 FTP</li>
<li>表示层 </li>
<li>会话层 </li>
<li>传输层 TCP UDP</li>
<li>网络层 IP</li>
<li>数据链路层 </li>
<li>物理层</li>
</ol>
<h4 id="Http-Https-区别"><a href="#Http-Https-区别" class="headerlink" title="Http/Https 区别"></a>Http/Https 区别</h4><p><strong>基本概念</strong></p>
<ul>
<li><p><strong>HTTP</strong>（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p>
</li>
<li><p>HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 <strong>http://</strong> 打头的都是标准 HTTP 服务。</p>
</li>
<li><p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
</li>
<li><p><strong>HTTPS</strong>（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>
</li>
</ul>
<p><strong>区别</strong></p>
<ul>
<li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li>
<li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li>
<li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li>
<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li>
<li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li>
</ul>
<p><strong>https实现原理</strong></p>
<img src="D:\Users\Acui\Documents\面向后端开发学习\面试重点问题整理.assets\v2-1ea0209a526f3527a713736fe7609fcf_720w.jpg" alt="img" style="zoom: 50%;" />

<p><strong>① 证书验证阶段：</strong></p>
<ul>
<li>1）浏览器发起 HTTPS 请求；</li>
<li>2）服务端返回 HTTPS 证书；</li>
<li>3）客户端验证证书是否合法，如果不合法则提示告警。</li>
</ul>
<p><strong>② 数据传输阶段：</strong></p>
<ul>
<li>1）当证书验证合法后，在本地生成随机数；</li>
<li>2）通过公钥加密随机数，并把加密后的随机数传输到服务端；</li>
<li>3）服务端通过私钥对随机数进行解密；</li>
<li>4）服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输。</li>
</ul>
<h4 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h4><ol>
<li><p><strong>区别</strong>：有无连接、是否可靠、传输形式（TCP面向字节流，传送的数据单元是报文段）、应用场景</p>
</li>
<li><p><strong>TCP如何保证可靠传输：</strong> </p>
<ul>
<li><strong>校验和</strong>  检测数据再传输过程中是否发生变化</li>
<li><strong>序列号和确认应答</strong>  <ul>
<li>TCP给每个包进行编号（递增排序），接收方的传输层对数据包排序，传给自己的应用层，并累积确认每个数据包</li>
</ul>
</li>
<li><strong>超时重传</strong> ： 当TCP发出一个段之后，启动定时器，等待接受方确认，若没有及时确认，重发</li>
<li><strong>流量控制</strong> ： 连接双方都有缓冲区，接受方只允许发送方发送其缓冲区能容纳的数据，当接受方来不及处理时，可以提示对方降低发送速率，防止包丢失，滑动窗口实现流量控制</li>
<li><strong>拥塞控制</strong> ： 网络拥塞时，减少数据发送</li>
</ul>
</li>
<li><p>TCP 三次握手</p>
<p><img src="D:\Users\Acui\Documents\面向后端开发学习\面试重点问题整理.assets\image-20220513092820911.png" alt="image-20220513092820911"></p>
</li>
<li><p>TCP 四次挥手</p>
<p><img src="D:\Users\Acui\Documents\面向后端开发学习\面试重点问题整理.assets\image-20220513092904492.png" alt="image-20220513092904492"></p>
</li>
</ol>
<h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><h4 id="输入一个网址到展示网址发生了什么"><a href="#输入一个网址到展示网址发生了什么" class="headerlink" title="输入一个网址到展示网址发生了什么"></a>输入一个网址到展示网址发生了什么</h4><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="进程调度方法有哪些？"><a href="#进程调度方法有哪些？" class="headerlink" title="进程调度方法有哪些？"></a>进程调度方法有哪些？</h4><ul>
<li>FCFS</li>
<li>SJF</li>
<li>时间片轮转</li>
<li>优先级调度</li>
<li>多级反馈队列调度</li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="select-poll-epoll区别"><a href="#select-poll-epoll区别" class="headerlink" title="select poll epoll区别"></a>select poll epoll区别</h4><p>三者都是 IO <strong>多路复用</strong>模型 </p>
<ul>
<li>多路: 指的是多个socket网络连接;</li>
<li>复用: 指的是复用一个线程；</li>
<li>多路复用主要有三种技术：select，poll，epoll。epoll是最新的, 也是目前最好的多路复用技术</li>
</ul>
<p> 区别</p>
<ul>
<li><p>select</p>
<p>保存文件描述符集合（fd_set），每次将用户态的 fd 复制到内核态，遍历查询是否有事件  有最大文件描述符数量限制，默认 32 位为 1024，64 位为2048 </p>
</li>
<li><p>poll</p>
<p>poll 用链表保存 fd _set </p>
</li>
<li><p>epoll</p>
<ul>
<li>epoll_create：创建一个epoll句柄</li>
<li>epoll_ctl：向 epoll 对象中添加/修改/删除要管理的连接</li>
<li>epoll_wait：等待其管理的连接上的 IO 事件</li>
</ul>
</li>
</ul>
<p>select 和 poll 速度都比较慢，每次调用都需要将全部描述符从内核复制到应用程序缓冲区</p>
<h4 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a><a href="https://juejin.cn/post/6844903930166509581#heading-40">常用Linux命令</a></h4><ul>
<li><p>文件目录操作</p>
<ul>
<li><strong>ls cd pwd mkdir rm mv cp touch cat nl more less head tail</strong></li>
</ul>
</li>
<li><p>文件查找</p>
<ul>
<li><strong>which whereis locate find</strong></li>
</ul>
</li>
<li><p>文件打包上传和下载</p>
<ul>
<li>```shell<br>tar -zcvf 1.txt test.tar.gz #压缩文件<br>tar -zxvf test.tar.gz #解压缩文件<br>gzip *<br>gzip -d *<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 文件权限设置</span><br><span class="line"></span><br><span class="line">  - 权限范围：</span><br><span class="line"></span><br><span class="line">    - u ：目录或者文件的当前的用户</span><br><span class="line">    - g ：目录或者文件的当前的群组</span><br><span class="line">    - o ：除了目录或者文件的当前用户或群组之外的用户或者群组</span><br><span class="line">    - a ：所有的用户及群组</span><br><span class="line"></span><br><span class="line">    权限代号：</span><br><span class="line"></span><br><span class="line">    - r：读权限，用数字4表示</span><br><span class="line">    - w：写权限，用数字2表示</span><br><span class="line">    - x：执行权限，用数字1表示</span><br><span class="line">    - -：删除权限，用数字0表示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;shell</span><br><span class="line">    chmod a+x test.log #增加文件所有用户组可执行权限</span><br><span class="line">    chmod a-x test.log #删除所有用户的可执行权限</span><br><span class="line">    </span><br><span class="line">    chgrp -v bin test.log #改变文件的群组属性</span><br><span class="line">    chgrp --reference&#x3D;test.log test1.log # 改变文件test1.log 的群组属性，使得文件test1.log的群组属性和参考文件test.log的群组属性相同</span><br><span class="line">    chown mail:mail tset.log #改变用户组和用户</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>磁盘存储</p>
<ul>
<li><p>```shell<br>df -h -t ext3 #显示指定磁盘文件的可用空间。<br>du test.log #显示指定目录或文件所占空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**性能监控和优化命令**</span><br><span class="line"></span><br><span class="line">- **top**  显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等。</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;shell</span><br><span class="line">  top</span><br></pre></td></tr></table></figure>

<img src="D:\Users\Acui\Documents\面向后端开发学习\面试记录\不会的问题整理.assets\image-20220411162255506.png" alt="image-20220411162255506" style="zoom: 67%;" /></li>
<li><p><strong>free</strong> 显示内存情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -ht #显示内存情况。 -h human-readable -t 显示总和行</span><br></pre></td></tr></table></figure>

<p><img src="D:\Users\Acui\Documents\面向后端开发学习\面试重点问题整理.assets\image-20220411162629043.png" alt="image-20220411162629043"></p>
</li>
<li><p><strong>vmstat</strong> 虚拟内存情况</p>
</li>
<li><p><strong>iostat</strong> [参数] [时间] [次数]  通过iostat方便查看CPU、网卡、tty设备、磁盘、CD-ROM 等等设备的活动情况, 负载信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat 2 3 #每隔 2秒刷新显示，且显示3次</span><br></pre></td></tr></table></figure></li>
<li><p><strong>lsof</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof /bin/bash #查看那个进程在使用bash命令</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="MySQL-amp-Redis"><a href="#MySQL-amp-Redis" class="headerlink" title="MySQL &amp; Redis"></a>MySQL &amp; Redis</h3><h4 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h4><p><a href="https://www.cnblogs.com/wangfengming/articles/7929118.html">数据库三范式-详解</a></p>
<ul>
<li>第一范式 （<strong>原子字段</strong>）<ul>
<li>若表中的所有字段值都是原子的，则满足第一范式</li>
<li>字段分解要根据实际需求来定  如 地址 - （省份、城市）</li>
</ul>
</li>
<li>第二范式（<strong>确保每列都和主键相关</strong>）<ul>
<li>第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</li>
</ul>
</li>
<li>第三范式（<strong>确保每列都和主键列直接相关,而不是间接相关</strong>）</li>
</ul>
<p><strong>注意事项：</strong></p>
<ol>
<li><p>第二范式与第三范式的本质区别：在于有没有分出两张表。</p>
<p>第二范式是说一张表中包含了多种不同实体的属性，那么必须要分成多张表，第三范式是要求已经分好了多张表的话，一张表中只能有另一张表的ID，而不能有其他任何信息，（其他任何信息，一律用主键在另一张表中查询）。</p>
</li>
<li><p>必须先满足第一范式才能满足第二范式，必须同时满足第一第二范式才能满足第三范式。</p>
</li>
</ol>
<h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h4><ol>
<li><strong>普通索引</strong> 最基本的索引，值可为空</li>
<li><strong>唯一索引</strong> 索引列的值必须唯一，但允许有空值</li>
<li><strong>主键索引</strong> 特殊的唯一索引，不允许有空值</li>
<li><strong>联合索引</strong>：对表中两个以上的字段联合建立索引，遵循<strong>最左匹配原则</strong><ul>
<li>最左匹配原则  （col1 col2 col3）  </li>
<li>col1 col2   索引生效</li>
<li>col2 col3 col1 生效</li>
<li>col2 col3  不生效</li>
</ul>
</li>
<li><strong>全文索引</strong> 用来查找文本中的关键字</li>
</ol>
<p>MySQL 引擎 中的索引</p>
<p>Innodb: 聚簇索引（主键索引）</p>
<p>MyISAM: 非聚簇索引（给普通字段加索引）</p>
<h4 id="2-Mybatis中-和-的区别"><a href="#2-Mybatis中-和-的区别" class="headerlink" title="2.Mybatis中 #{} 和 ${} 的区别"></a>2.Mybatis中 #{} 和 ${} 的区别</h4><p>#{} 是预编译， ${} 是字符串替换</p>
<p>MyBatis在处理#{}时，会将SQL中的#{}替换为?号，使用PreparedStatement的set方法来赋值；MyBatis在处理 $ { } 时，就是把 ${ } 替换成变量的值。</p>
<p>使用 #{} 可以有效的防止SQL注入，提高系统安全性。</p>
<h4 id="3-Redis的数据结构"><a href="#3-Redis的数据结构" class="headerlink" title="3. Redis的数据结构"></a>3. Redis的数据结构</h4><p>Redis 有 5 种基础数据结构，它们分别是： string (字符串) 、 list (列表) 、 hash (字典) 、 set (集合) 和 zset (有序集合) 。</p>
<h4 id="4-zset底层-跳表"><a href="#4-zset底层-跳表" class="headerlink" title="4.zset底层-跳表"></a>4.zset底层-跳表</h4><p>链表 高效增删  做排行榜功能十分有效</p>
<h4 id="5-Redis-底层"><a href="#5-Redis-底层" class="headerlink" title="5.Redis 底层"></a>5.Redis 底层</h4><p>核心点：</p>
<ol>
<li>Redis是一个Key-Value形式的内存存储系统；</li>
<li>只包含“键”-“值”；</li>
<li>缓存；</li>
<li>分布式锁。</li>
<li>基于 epoll 等 I/O 多路复用技术，实现高吞吐的网络I/O</li>
<li>底层通讯模型 ： 单线程模型，集合IO多路复用，避免过多的上下文切换开销</li>
</ol>
<h4 id="MVCC-多版本并发控制器"><a href="#MVCC-多版本并发控制器" class="headerlink" title="MVCC 多版本并发控制器"></a>MVCC 多版本并发控制器</h4><p>MVCC指的就是在使用<code>READ COMMITTD</code>、<code>REPEATABLE READ</code>这两种隔离级别的事务在执行普通的<code>SEELCT</code>操作时访问记录的<code>版本链</code>的过程，这样子可以使不同事务的<code>读-写</code>、<code>写-读</code>操作<code>并发执行</code>，从而<code>提升系统性能</code>。</p>
<h4 id="慢sql分析"><a href="#慢sql分析" class="headerlink" title="慢sql分析"></a>慢sql分析</h4><p><a href="https://www.cnblogs.com/zjxiang/p/9157398.html">慢sql分析</a></p>
<p>对慢SQL优化一般可以按下面几步的思路：</p>
<ol>
<li><p>开启慢查询日志，设置超过几秒为慢SQL，抓取慢SQL</p>
</li>
<li><p>通过explain对慢SQL分析（重点）</p>
<p>explain + SQL语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> explain select * from emp;</span></span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | emp   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   14 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>possible_key</th>
<th>key</th>
<th>ref</th>
<th>rows</th>
</tr>
</thead>
<tbody><tr>
<td>表读取顺序</td>
<td>MySQL理解的查询类型 simple primary subquery</td>
<td>可能用到的索引</td>
<td>实际所用索引</td>
<td>反映哪些列或常量被用于查找索引列上的值</td>
<td>推断所要读取的行数</td>
</tr>
</tbody></table>
</li>
<li><p>show profile查询SQL在Mysql服务器里的执行细节和生命周期情况（重点）</p>
<p>能获得比explain更详细的信息，能分析当前会话中语句执行的资源消耗情况，能获得这条SQL在整个生命周期的耗时，相当于执行时间的清单，也很重要</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> profiling = on;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">... some queries</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show profiles;</span></span><br><span class="line">+----------+------------+----------------------------------+</span><br><span class="line">| Query_ID | Duration   | Query                            |</span><br><span class="line">+----------+------------+----------------------------------+</span><br><span class="line">|        1 | 0.00967250 | show variables like &#x27;profiling%&#x27; |</span><br><span class="line">|        2 | 0.01567225 | show databases                   |</span><br><span class="line">|        3 | 0.00136325 | SELECT DATABASE()                |</span><br><span class="line">|        4 | 0.00053075 | show tables                      |</span><br><span class="line">|        5 | 0.01724050 | select * from emp                |</span><br><span class="line">+----------+------------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>对数据库服务器的参数调优</p>
</li>
</ol>
<h3 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h3><h4 id="1-Spring-简介"><a href="#1-Spring-简介" class="headerlink" title="1.Spring 简介"></a>1.Spring 简介</h4><ul>
<li><p>Spring 是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器框架</p>
<ul>
<li>IOC 控制反转，将对象的使用权交由Spring管理</li>
</ul>
</li>
<li><p>特点： 轻量、非侵入式、控制反转、面向切面、容器、框架</p>
</li>
</ul>
<h4 id="2-SpringBoot-的启动过程"><a href="#2-SpringBoot-的启动过程" class="headerlink" title="2.SpringBoot 的启动过程"></a>2.SpringBoot 的启动过程</h4><p><a href="https://www.cnblogs.com/theRhyme/p/11057233.html">SPRINGBOOT启动流程及其原理</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;<span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要流程如下：</p>
<ol>
<li>首先从main找到run()方法，在执行run()方法之前new一个SpringApplication对象</li>
<li>进入run()方法，创建应用监听器SpringApplicationRunListeners开始监听</li>
<li>然后加载SpringBoot配置环境(ConfigurableEnvironment)，然后把配置环境(Environment)加入监听对象中</li>
<li>然后加载应用上下文(ConfigurableApplicationContext)，当做run方法的返回对象</li>
<li>最后创建Spring容器，refreshContext(context)，实现starter自动化配置和bean的实例化等工作。</li>
</ol>
<h3 id="分布式微服务"><a href="#分布式微服务" class="headerlink" title="分布式微服务"></a>分布式微服务</h3><h4 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h4><ul>
<li>Feign 是如何实现</li>
</ul>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><h1 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h1><h2 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h2><p>作为一个新人，刚进入公司时我会从基础做起，踏实的走好每一步，快速的融入开发团队中去，按时完成任务。在工作过程中不断积累经验，在工作三四年，对公司的底层代码和业务十分了解之后，会考虑往架构师的方向发展。</p>
<h2 id="反问问题"><a href="#反问问题" class="headerlink" title="反问问题"></a>反问问题</h2><ol>
<li>针对实习生/新员工有哪些培训？</li>
<li>对这个岗位的定义</li>
<li>我觉得我这次表现不太好，你有什么建议给我吗</li>
<li>一共几面</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
